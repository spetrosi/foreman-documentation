<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book [
<!ENTITY % BOOK_ENTITIES SYSTEM "master.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<book version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<?asciidoc-toc ?><?asciidoc-numbered ?>
	<info>
		<title>Managing Hosts</title>
		<subtitle>A guide to managing hosts in a Red Hat Satellite 6 environment.</subtitle>
		 <date>2020-05-15</date>
		<productname>Red Hat Satellite</productname>
		<productnumber>6.7</productnumber>
		<abstract>
			<para>
				This guide describes how to configure and work with hosts in a Red Hat Satellite environment. Before continuing with this workflow you must have successfully installed a Red Hat Satellite 6 Server and any required Capsule Servers.
			</para>
		</abstract>
		<xi:include href="Author_Group.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</info>
	<chapter xml:id="overview-of-hosts-in-satellite">
		<title>Overview of Hosts in Red Hat Satellite 6</title>
		<simpara>
			A host is any Red Hat Enterprise Linux client that Red Hat Satellite manages. Hosts can be physical or virtual. Virtual hosts can be deployed on any platform supported by Red Hat Satellite, such as KVM, VMware vSphere, OpenStack, Amazon EC2, Rackspace Cloud Services or Google Compute Engine.
		</simpara>
		<simpara>
			Red Hat Satellite enables host management at scale, including monitoring, provisioning, remote execution, configuration management, software management, and subscription management. You can manage your hosts from the Satellite web UI or from the command line.
		</simpara>
		<simpara>
			In the Satellite web UI, you can browse all hosts recognized by Satellite Server, grouped by type:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					<emphasis role="strong">All Hosts</emphasis> - a list of all hosts recognized by Satellite Server.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<emphasis role="strong">Discovered Hosts</emphasis> - a list of bare-metal hosts detected on the provisioning network by the Discovery plug-in.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<emphasis role="strong">Content Hosts</emphasis> - a list of hosts that manage tasks related to content and subscriptions.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<emphasis role="strong">Host Collections</emphasis> - a list of user-defined collections of hosts used for bulk actions such as errata installation.
				</simpara>
			</listitem>
		</itemizedlist>
		<simpara>
			To search for a host, type in the <emphasis role="strong">Search</emphasis> field, and use an asterisk (*) to perform a partial string search. For example, if searching for a content host named <literal>dev-node.example.com</literal>, click the <emphasis role="strong">Content Hosts</emphasis> page and type <literal>dev-node*</literal> in the <emphasis role="strong">Search</emphasis> field. Alternatively, <literal>*node*</literal> will also find the content host <literal>dev-node.example.com.</literal>
		</simpara>
		<warning>
			<simpara>
				Satellite Server is listed as a host itself even if it is not self-registered. Do not delete Satellite Server from the list of hosts.
			</simpara>
		</warning>
	</chapter>
	<chapter xml:id="Administering_Hosts">
		<title>Administering Hosts</title>
		<simpara>
			This chapter describes creating, registering, administering, and removing hosts.
		</simpara>
		<section xml:id="creating-a-host-in-satellite">
			<title>Creating a Host in Red Hat Satellite</title>
			<simpara>
				Use this procedure to create a host in Red Hat Satellite.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Create Host</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Host</emphasis> tab, enter the required details.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Ansible Roles</emphasis> tab, and from the <emphasis role="strong">Ansible Roles</emphasis> list, select one or more roles that you want to add to the host. Use the <emphasis role="strong">arrow</emphasis> icon to manage the roles that you add or remove.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Puppet Classes</emphasis> tab, select the Puppet classes you want to include.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Interfaces</emphasis> tab:
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								For each interface, click <emphasis role="strong">Edit</emphasis> in the <emphasis role="strong">Actions</emphasis> column and configure the following settings as required:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Type</emphasis> — For a Bond or BMC interface, use the <emphasis role="strong">Type</emphasis> list and select the interface type.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">MAC address</emphasis> — Enter the MAC address.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">DNS name</emphasis> — Enter the DNS name that is known to the DNS server. This is used for the host part of the FQDN.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Domain</emphasis> — Select the domain name of the provisioning network. This automatically updates the <emphasis role="strong">Subnet</emphasis> list with a selection of suitable subnets.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">IPv4 Subnet</emphasis> — Select an IPv4 subnet for the host from the list.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">IPv6 Subnet</emphasis> — Select an IPv6 subnet for the host from the list.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">IPv4 address</emphasis> — If IP address management (IPAM) is enabled for the subnet, the IP address is automatically suggested. Alternatively, you can enter an address. The address can be omitted if provisioning tokens are enabled, if the domain does not mange DNS, if the subnet does not manage reverse DNS, or if the subnet does not manage DHCP reservations.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">IPv6 address</emphasis> — If IP address management (IPAM) is enabled for the subnet, the IP address is automatically suggested. Alternatively, you can enter an address.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Managed</emphasis> — Select this check box to configure the interface during provisioning to use the Capsule provided DHCP and DNS services.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Primary</emphasis> — Select this check box to use the DNS name from this interface as the host portion of the FQDN.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Provision</emphasis> — Select this check box to use this interface for provisioning. This means TFTP boot will take place using this interface, or in case of image based provisioning, the script to complete the provisioning will be executed through this interface. Note that many provisioning tasks, such as downloading RPMs by <emphasis role="strong">anaconda</emphasis>, Puppet setup in a <literal>%post</literal> script, will use the primary interface.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Virtual NIC</emphasis> — Select this check box if this interface is not a physical device. This setting has two options:
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												<emphasis role="strong">Tag</emphasis> — Optionally set a VLAN tag. If unset, the tag will be the VLAN ID of the subnet.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">Attached to</emphasis> — Enter the device name of the interface this virtual interface is attached to.
											</simpara>
										</listitem>
									</itemizedlist>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">OK</emphasis> to save the interface configuration.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Optionally, click <emphasis role="strong">Add Interface</emphasis> to include an additional network interface. See <xref linkend="Adding_Network_Interfaces" /> for details.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Submit</emphasis> to apply the changes and exit.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Operating System</emphasis> tab, enter the required details. For Red Hat operating systems, select <emphasis role="strong">Synced Content</emphasis> for <emphasis role="strong">Media Selection</emphasis>. If you want to use non Red Hat operating systems, select <emphasis role="strong">All Media</emphasis>, then select the installation media from the <emphasis role="strong">Media Selection</emphasis> list. You can select a partition table from the list or enter a custom partition table in the <emphasis role="strong">Custom partition table</emphasis> field. You cannot specify both.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Parameters</emphasis> tab, click <emphasis role="strong">Add Parameter</emphasis> to add any parameter variables that you want to pass to job templates at run time. This includes all Puppet Class, Ansible playbook parameters and host parameters that you want to associate with the host. To use a parameter variable with an Ansible job template, you must add a <emphasis role="strong">Host Parameter</emphasis>.
					</simpara>
					<simpara>
						When you create a Red Hat Enterprise Linux 8 host, you can set system purpose attributes. System purpose attributes define what subscriptions to attach automatically on host creation. In the <emphasis role="strong">Host Parameters</emphasis> area, enter the following parameter names with the corresponding values. For the list of values, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/graphical-installation_graphical-installation#configuring-system-purpose-standard_configuring-system-settings">Configuring system purpose</link> in the <emphasis>Performing a standard RHEL installation</emphasis> guide.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>syspurpose_role</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>syspurpose_sla</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>syspurpose_usage</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>syspurpose_addons</literal>
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Additional Information</emphasis> tab, enter additional information about the host.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to complete your provisioning request.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					To create a host associated to a host group, enter the following command:
				</para>
			</formalpara>
			
<screen># hammer host create \
--name "<emphasis>host_name</emphasis>" \
--hostgroup "<emphasis>hostgroup_name</emphasis>" \
--interface="primary=true, \
            provision=true, \
            mac=<emphasis>mac_address</emphasis>, \
            ip=<emphasis>ip_address</emphasis>" \
--organization "<emphasis>Your_Organization</emphasis>" \
--location "<emphasis>Your_Location</emphasis>" \
--ask-root-password yes</screen>
			<simpara>
				This command prompts you to specify the root password. It is required to specify the host’s IP and MAC address. Other properties of the primary network interface can be inherited from the host group or set using the <literal>--subnet</literal>, and <literal>--domain</literal> parameters. You can set additional interfaces using the <literal>--interface</literal> option, which accepts a list of key-value pairs. For the list of available interface settings, enter the <literal>hammer host create --help</literal> command.
			</simpara>
		</section>
		<section xml:id="editing-the-system-purpose-of-a-host">
			<title>Editing the System Purpose of a Host</title>
			<simpara>
				You can edit the system purpose attributes for a Red Hat Enterprise Linux 8 host. System purpose attributes define which subscriptions to attach automatically to this host. For more information about system purpose, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/graphical-installation_graphical-installation#configuring-system-purpose-standard_configuring-system-settings">Configuring system purpose</link> in the <emphasis>Performing a standard RHEL installation</emphasis> guide.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Content Hosts</emphasis> and click the name of the Red Hat Enterprise Linux 8 host that you want to edit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">System Purpose</emphasis> area, click the <emphasis role="strong">Edit</emphasis> or <emphasis role="strong">Remove</emphasis> icon for the system purpose attributes that you want to edit, add, or remove.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Subscriptions</emphasis> tab and select <emphasis role="strong">Subscriptions</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Run Auto-Attach</emphasis> to attach subscriptions to your host automatically.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Refresh the page to verify that the subscriptions list contains the correct subscriptions.
					</simpara>
				</listitem>
			</orderedlist>
			<orderedlist numeration="arabic">
				<title>For CLI Users</title>
				<listitem>
					<simpara>
						Log in to the host and edit the required system purpose attributes. For example, set the usage type to <literal>Production</literal>, the role to <literal>Red Hat Enterprise Linux Server</literal>, and add the <literal>addon</literal> add on. For the list of values, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/graphical-installation_graphical-installation#configuring-system-purpose-standard_configuring-system-settings">Configuring system purpose</link> in the <emphasis>Performing a standard RHEL installation</emphasis> guide.
					</simpara>
					
<screen># syspurpose set-usage <literal><emphasis>Production</emphasis></literal>
# syspurpose set-role <literal><emphasis>Red Hat Enterprise Linux Server</emphasis></literal>
# syspurpose add-addons '<emphasis>your_addon</emphasis>'</screen>
				</listitem>
				<listitem>
					<simpara>
						Verify the system purpose attributes for this host:
					</simpara>
					
<screen># syspurpose show</screen>
				</listitem>
				<listitem>
					<simpara>
						Automatically attach subscriptions to this host:
					</simpara>
					
<screen># subscription-manager attach --auto</screen>
				</listitem>
				<listitem>
					<simpara>
						Verify the system purpose status for this host:
					</simpara>
					
<screen># subscription-manager status</screen>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="changing-a-module-stream-for-a-host">
			<title>Changing a Module Stream for a Host</title>
			<simpara>
				If you have a Red Hat Enterprise Linux 8 host, you can modify the module stream for the repositories you install. After you create the host, you can enable, disable, install, update, and remove module streams from your host in the Satellite web UI.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Content Hosts</emphasis> and click the name of the host that contains the modules you want to change.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Module Streams</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Available Module Streams</emphasis> list, locate the module that you want to change. You can use the <emphasis role="strong">Filter</emphasis> field to refine the list entries. You can also use the <emphasis role="strong">Filter Status</emphasis> list to search for modules with a specific status.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Actions</emphasis> list, select the change that you want to make to the module.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Job Invocation</emphasis> window, ensure that the job information is accurate. Change any details that you require, and then click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="creating-a-host-group">
			<title>Creating a Host Group</title>
			<simpara>
				If you create a high volume of hosts, many of the hosts can have common settings and attributes. Adding these settings and attributes for every new host is time consuming. If you use host groups, you can apply common attributes to hosts that you create.
			</simpara>
			<simpara>
				A host group functions as a template for common host settings, containing many of the same details that you provide to hosts. When you create a host with a host group, the host inherits the defined settings from the host group. You can then provide additional details to individualize the host.
			</simpara>
			<formalpara>
				<title>Host Group Hierarchy</title>
				<para>
					You can create a hierarchy of host groups. Aim to have one base level host group that represents all hosts in your organization and provide general settings, and then nested groups to provide specific settings. For example, you can have a base level host group that defines the operating system, and two nested host groups that inherit the base level host group:
				</para>
			</formalpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Hostgroup:</emphasis> <literal>Base</literal> (Red Hat Enterprise Linux 7.6)
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Hostgroup:</emphasis> <literal>Webserver</literal> (applies the <literal>httpd</literal> Puppet class)
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Host:</emphasis> <literal>webserver1.example.com</literal> (web server)
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Host:</emphasis> <literal>webserver2.example.com</literal> (web server)
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Hostgroup:</emphasis> <literal>Storage</literal> (applies the <literal>nfs</literal> Puppet class)
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Host:</emphasis> <literal>storage1.example.com</literal> (storage server)
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Host:</emphasis> <literal>storage2.example.com</literal> (storage server)
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Host:</emphasis> <literal>custom.example.com</literal> (custom host)
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<simpara>
				In this example, all hosts use Red Hat Enterprise Linux 7.6 as their operating system because of their inheritance of the <literal>Base</literal> host group. The two web server hosts inherit the settings from the <literal>Webserver</literal> host group, which includes the <literal>httpd</literal> Puppet class and the settings from the <literal>Base</literal> host group. The two storage servers inherit the settings from the <literal>Storage</literal> host group, which includes the <literal>nfs</literal> Puppet class and the settings from the <literal>Base</literal> host group. The custom host only inherits the settings from the <literal>Base</literal> host group.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Configure</emphasis> &gt; <emphasis role="strong">Host Groups</emphasis> and click <emphasis role="strong">Create Host Group</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						If you have an existing host group that you want to inherit attributes from, you can select a host group from the <emphasis role="strong">Parent</emphasis> list. If you do not, leave this field blank.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter a <emphasis role="strong">Name</emphasis> for the new host group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter any further information that you want future hosts to inherit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Ansible Roles</emphasis> tab, and from the <emphasis role="strong">Ansible Roles</emphasis> list, select one or more roles that you want to add to the host. Use the <emphasis role="strong">arrow</emphasis> icon to manage the roles that you add or remove.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the additional tabs and add any details that you want to attribute to the host group.
					</simpara>
					<note>
						<simpara>
							Puppet fails to retrieve the Puppet CA certificate while registering a host with a host group associated with a Puppet environment created inside a <literal>Production</literal> environment.
						</simpara>
						<simpara>
							To create a suitable Puppet environment to be associated with a host group, manually create a directory and change the owner:
						</simpara>
						
<screen># mkdir /etc/puppetlabs/code/environments/<emphasis>example_environment</emphasis>
# chown apache /etc/puppetlabs/code/environments/<emphasis>example_environment</emphasis></screen>
					</note>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to save the host group.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					Create the host group with the <literal>hammer hostgroup create</literal> command. For example:
				</para>
			</formalpara>
			
<screen># hammer hostgroup create --name "Base" \
--lifecycle-environment "Production" --content-view "Base" \
--puppet-environment "production" --content-source-id 1 \
--puppet-ca-proxy-id 1 --puppet-proxy-id 1 --domain "example.com" \
--subnet `ACME's Internal Network` --architecture "x86_64" \
--operatingsystem "RedHat 7.2" --medium-id 9 \
--partition-table "Kickstart default" --root-pass "p@55w0rd!" \
--locations "New York" --organizations "ACME"</screen>
		</section>
		<section xml:id="creating-a-host-group-for-each-lifecycle-environment">
			<title>Creating a Host Group for Each LifeCycle Environment</title>
			<simpara>
				Use this procedure to create a host group for the Library lifecycle environment and add nested host groups for other lifecycle environments.
			</simpara>
			<formalpara>
				<title>Procedure</title>
				<para>
					To create a host group for each life cycle environment, run the following Bash script:
				</para>
			</formalpara>
			
<programlisting language="Bash" linenumbering="unnumbered">MAJOR="<emphasis>7</emphasis>"
ARCH="<emphasis>x86_64</emphasis>"
ORG="<emphasis>Your Organization</emphasis>"
LOCATIONS="<emphasis>Your Location</emphasis>"
PTABLE_NAME="<emphasis>Kickstart default</emphasis>"
DOMAIN="<emphasis>example.com</emphasis>"

hammer --output csv --no-headers lifecycle-environment list --organization "${ORG}" | cut -d ',' -f 2 | while read LC_ENV; do
  [[ ${LC_ENV} == "Library" ]] &amp;&amp; continue

  hammer hostgroup create --name "rhel-${MAJOR}server-${ARCH}-${LC_ENV}" \
    --architecture "${ARCH}" \
    --partition-table "${PTABLE_NAME}" \
    --domain "${DOMAIN}" \
    --organizations "${ORG}" \
    --query-organization "${ORG}" \
    --locations "${LOCATIONS}" \
    --lifecycle-environment "${LC_ENV}"
done</programlisting>
		</section>
		<section xml:id="changing-the-group-of-a-host">
			<title>Changing the Group of a Host</title>
			<simpara>
				Use this procedure to change the group of a host.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the check box of the host you want to change.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Change Group</emphasis>. A new option window opens.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Host Group</emphasis> list, select the group that you want for your host.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="changing-the-environment-of-a-host">
			<title>Changing the Environment of a Host</title>
			<simpara>
				Use this procedure to change the environment of a host.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the check box of the host you want to change.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Change Environment</emphasis>. A new option window opens.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Environment</emphasis> list, select the new environment for your host.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="changing-the-managed-status-of-a-host">
			<title>Changing the Managed Status of a Host</title>
			<simpara>
				Hosts provisioned by Satellite are Managed by default. When a host is set to Managed, you can configure additional host parameters from Satellite Server. These additional parameters are listed on the <emphasis role="strong">Operating System</emphasis> tab. If you change any settings on the <emphasis role="strong">Operating System</emphasis> tab, they will not take effect until you set the host to build and reboot it.
			</simpara>
			<simpara>
				If you need to obtain reports about configuration management on systems using an operating system not supported by Satellite, set the host to Unmanaged.
			</simpara>
			<simpara>
				Use this procedure to switch a host between Managed and Unmanaged status.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the host.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Edit</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Manage host</emphasis> or <emphasis role="strong">Unmanage host</emphasis> to change the host’s status.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="assinging-a-host-to-a-specific-organization">
			<title>Assigning a Host to a Specific Organization</title>
			<simpara>
				Use this procedure to assign a host to a specific organization. For general information about organizations and how to configure them, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/content_management_guide/managing_organizations">Managing Organizations</link> in the <emphasis>Content Management Guide</emphasis>.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the check box of the host you want to change.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Assign Organization</emphasis>. A new option window opens.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Organization</emphasis> list, select the organization that you want to assign your host to. Select the check box <emphasis role="strong">Fix Organization on Mismatch</emphasis>.
					</simpara>
					<note>
						<simpara>
							A mismatch happens if there is a resource associated with a host, such as a domain or subnet, and at the same time not associated with the organization you want to assign the host to. The option <emphasis role="strong">Fix Organization on Mismatch</emphasis> will add such a resource to the organization, and is therefore the recommended choice. The option <emphasis role="strong">Fail on Mismatch</emphasis> will always result in an error message. For example, reassigning a host from one organization to another will fail, even if there is no actual mismatch in settings.
						</simpara>
					</note>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="assigning-a-host-to-a-specific-location">
			<title>Assigning a Host to a Specific Location</title>
			<simpara>
				Use this procedure to assign a host to a specific location. For general information about locations and how to configure them, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/provisioning_guide/configuring_provisioning_contexts#Configuring_Provisioning_Contexts-Creating_a_Location">Creating a Location</link> in the <emphasis>Provisioning Guide</emphasis>.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the check box of the host you want to change.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Assign Location</emphasis>. A new option window opens.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Navigate to the <emphasis role="strong">Select Location</emphasis> list and choose the location that you want for your host. Select the check box <emphasis role="strong">Fix Location on Mismatch</emphasis>.
					</simpara>
					<note>
						<simpara>
							A mismatch happens if there is a resource associated with a host, such as a domain or subnet, and at the same time not associated with the location you want to assign the host to. The option <emphasis role="strong">Fix Location on Mismatch</emphasis> will add such a resource to the location, and is therefore the recommended choice. The option <emphasis role="strong">Fail on Mismatch</emphasis> will always result in an error message. For example, reassigning a host from one location to another will fail, even if there is no actual mismatch in settings.
						</simpara>
					</note>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="removing-a-host-from-satellite">
			<title>Removing a Host from Red Hat Satellite</title>
			<simpara>
				Use this procedure to remove a host from Red Hat Satellite.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis> or <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Content Hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the hosts that you want to remove.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Delete Hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to remove the host from Red Hat Satellite permanently.
					</simpara>
				</listitem>
			</orderedlist>
			<warning>
				<simpara>
					If a host record that is associated with a virtual machine is deleted, the virtual machine will be deleted as well. To avoid deleting the virtual machine in this situation, disassociate the virtual machine from Satellite without removing it from the hypervisor.
				</simpara>
			</warning>
			<orderedlist numeration="arabic" xml:id="disassociating-a-virtual-machine">
				<title>Disassociating A Virtual Machine from Satellite without Removing it from a Hypervisor</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis> and select the check box to the left of the hosts to be disassociated.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select the <emphasis role="strong">Disassociate Hosts</emphasis> button.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optionally, select the check box to keep the hosts for future action.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
	</chapter>
	<chapter xml:id="Registering_Hosts">
		<title>Registering Hosts</title>
		<simpara>
			There are two main methods for registering a host to Satellite Server or Capsule Server:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					Download and install the consumer RPM (<emphasis>server.example.com</emphasis>/pub/katello-ca-consumer-latest.noarch.rpm) and then run Subscription Manager. This method is suited for freshly installed hosts.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					Download and run the bootstrap script (<emphasis>server.example.com</emphasis>/pub/bootstrap.py). This method is suited for both freshly installed hosts and hosts that have been previously registered, for example, to Satellite 5 or another Satellite 6.
				</simpara>
			</listitem>
		</itemizedlist>
		<simpara>
			You can also register Atomic Hosts to Satellite Server or Capsule Server.
		</simpara>
		<simpara>
			Use one of the following procedures to register a host:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					<xref linkend="registering-a-host-to-satellite" />
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<xref linkend="registering-an-atomic-host-to-satellite" />
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<xref linkend="registering-a-host-to-satellite-using-the-bootstrap-script" />
				</simpara>
			</listitem>
		</itemizedlist>
		<simpara>
			Use the following procedures to install and configure host tools:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					<xref linkend="installing-the-katello-agent_managing-hosts" />
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<xref linkend="installing-tracer" />
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<xref linkend="installing-and-configuring-the-puppet-agent" />
				</simpara>
			</listitem>
		</itemizedlist>
		<formalpara>
			<title>Supported Host Operating Systems</title>
			<para>
				Hosts must use one of the following Red Hat Enterprise Linux versions:
			</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<simpara>
					5.7 or later
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					6.1 or later*
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					7.0 or later
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					8.0 or later
				</simpara>
			</listitem>
		</itemizedlist>
		<note>
			<simpara>
				Red Hat Enterprise Linux versions 6.1, 6.2, and 6.3 require <literal>subscription-manager</literal> and related packages to be updated manually. For more information, see <link xlink:href="https://access.redhat.com/solutions/1256763">https://access.redhat.com/solutions/1256763</link>.
			</simpara>
		</note>
		<formalpara>
			<title>Supported Architectures</title>
			<para>
				All architectures of Red Hat Enterprise Linux are supported:
			</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<simpara>
					i386
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					x86_64
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					s390x
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					ppc_64
				</simpara>
			</listitem>
		</itemizedlist>
		<section xml:id="registering-a-host-to-satellite">
			<title>Registering a Host to Red Hat Satellite</title>
			<simpara>
				Use the following procedure to register a host to Red Hat Satellite 6.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Satellite Server, any Capsule Servers, and all hosts must be synchronized with the same NTP server, and have a time synchronization tool enabled and running.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The daemon <emphasis role="strong">rhsmcertd</emphasis> must be running on the hosts.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						An activation key must be available for the host. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/content_management_guide/managing_activation_keys">Managing Activation Keys</link> in the <emphasis>Content Management Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Subscription Manager must be version 1.10 or later. The package is available in the standard Red Hat Enterprise Linux repository.
					</simpara>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>Procedure</title>
				<para>
					Red Hat Enterprise Linux hosts register to the Red Hat Content Delivery Network by default.
				</para>
			</formalpara>
			<simpara>
				Update each host configuration so that they receive updates from the correct Satellite Server or Capsule Server:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Note the fully qualified domain name (FQDN) of the Satellite Server or Capsule Server, for example <emphasis>server.example.com</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Log in to the host as the <literal>root</literal> user and download the <literal>katello-ca-consumer-latest.noarch.rpm</literal> package from Satellite Server or Capsule Server to which the host is to be registered. The consumer RPM configures the host to download content from the content source that is specified in Red Hat Satellite.
					</simpara>
					
<screen># curl --insecure --output katello-ca-consumer-latest.noarch.rpm https://<emphasis>satellite.example.com</emphasis>/pub/katello-ca-consumer-latest.noarch.rpm</screen>
				</listitem>
				<listitem>
					<simpara>
						Install the <literal>katello-ca-consumer-latest.noarch.rpm</literal> package:
					</simpara>
					
<screen># yum localinstall katello-ca-consumer-latest.noarch.rpm</screen>
					<note>
						<simpara>
							The RPM package is not signed. If required, you can add the <literal>--nosignature</literal> option to install the package. The <literal>katello-ca-consumer-<emphasis>hostname</emphasis>-1.0-1.noarch.rpm</literal> package is an additional <literal>katello-ca-consumer</literal> RPM that contains the server’s host name. The <literal>katello-ca-consumer-latest.noarch.rpm</literal> package always reflects the most recent version. Both serve the same purpose.
						</simpara>
					</note>
				</listitem>
				<listitem>
					<simpara>
						Clear any old host data related to Red Hat Subscription Manager (RHSM):
					</simpara>
					
<screen># subscription-manager clean</screen>
				</listitem>
				<listitem>
					<simpara>
						Register the host using RHSM:
					</simpara>
					
<screen># subscription-manager register --org=<emphasis>your_org_name</emphasis> \
--activationkey=<emphasis>your_activation_key</emphasis></screen>
					<example>
						<title>Command Output after Registration:</title>
						
<screen># subscription-manager register --org=MyOrg --activationkey=TestKey-1
The system has been registered with id: 62edc0f8-855b-4184-b1b8-72a9dc793b96</screen>
					</example>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					You can use the <literal>--environment</literal> option to override the Content View and life cycle environment defined by the activation key. For example, to register a host to the Content View "MyView" in a "Development" life cycle environment:
				</simpara>
				
<screen> # subscription-manager register --org=<emphasis>your_org_name</emphasis> \
 --environment=Development/MyView \
 --activationkey=<emphasis>your_activation_key</emphasis></screen>
			</note>
			<note>
				<simpara>
					For Red Hat Enterprise Linux 6.3 hosts, the release version defaults to Red Hat Enterprise Linux 6 Server and needs to be pointed to the 6.3 repository:
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Content Hosts</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the check box next to the host that needs to be changed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Set Release Version</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Release Version</emphasis> list, select <emphasis role="strong">6.3</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Done</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</note>
		</section>
		<section xml:id="registering-an-atomic-host-to-satellite">
			<title>Registering an Atomic Host to Red Hat Satellite</title>
			<simpara>
				Use the following procedure to register an Atomic Host to Red Hat Satellite 6.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Log in to the Atomic Host as the <literal>root</literal> user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve <literal>katello-rhsm-consumer</literal> from Satellite Server:
					</simpara>
					
<screen># wget http://<emphasis>satellite.example.com</emphasis>/pub/katello-rhsm-consumer</screen>
				</listitem>
				<listitem>
					<simpara>
						Change the mode of <literal>katello-rhsm-consumer</literal> to make it executable:
					</simpara>
					
<screen># chmod +x katello-rhsm-consumer</screen>
				</listitem>
				<listitem>
					<simpara>
						Run <literal>katello-rhsm-consumer</literal>:
					</simpara>
					
<screen># ./katello-rhsm-consumer</screen>
					<simpara>
						Register with Red Hat Subscription Manager:
					</simpara>
					
<screen># subscription-manager register</screen>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					The Katello agent is not supported on Atomic Hosts.
				</simpara>
			</note>
		</section>
		<section xml:id="registering-a-host-to-satellite-using-the-bootstrap-script">
			<title>Registering a Host to Red Hat Satellite Using The Bootstrap Script</title>
			<simpara>
				Use the bootstrap script to automate content registration and Puppet configuration. You can use the bootstrap script to register new hosts, or to migrate existing hosts to Red Hat Satellite 6 from Satellite 5, RHN, SAM, or RHSM.
			</simpara>
			<simpara>
				The <literal>katello-client-bootstrap</literal> package is installed by default on Satellite Server’s base operating system. The <literal>bootstrap.py</literal> script is installed in the <literal>/var/www/html/pub/</literal> directory to make it available to hosts at <literal><emphasis>satellite6.example.com</emphasis>/pub/bootstrap.py</literal>. The script includes documentation in the <literal>/usr/share/doc/katello-client-bootstrap-<emphasis>version</emphasis>/README.md</literal> file.
			</simpara>
			<simpara>
				To use the bootstrap script, you must install it on the host. As the script is only required once, and only for the <literal>root</literal> user, you can place it in <literal>/root</literal> or <literal>/usr/local/sbin</literal> and remove it after use. This procedure uses <literal>/root</literal>.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have a Satellite user with the permissions required to run the bootstrap script. The examples in this procedure specify the <literal>admin</literal> user. If this is not acceptable to your security policy, create a new role with the minimum permissions required and add it to the user that will run the script. For more information, see <xref linkend="setting-permissions-for-the-bootstrap-script" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have an activation key for your hosts with the Satellite Tools repository enabled. For information on configuring activation keys, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/content_management_guide/managing_activation_keys">Managing Activation Keys</link> in the <emphasis>Content Management Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have created a host group. For more information about creating host groups, see <xref linkend="creating-a-host-group" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>Puppet Considerations</title>
				<para>
					If a host group is associated with a Puppet environment created inside a <literal>Production</literal> environment, Puppet fails to retrieve the Puppet CA certificate while registering a host from that host group.
				</para>
			</formalpara>
			<simpara>
				To create a suitable Puppet environment to be associated with a host group, follow these steps:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Manually create a directory and change the owner:
					</simpara>
					
<screen># mkdir /etc/puppetlabs/code/environments/<emphasis>example_environment</emphasis>
# chown apache /etc/puppetlabs/code/environments/<emphasis>example_environment</emphasis></screen>
				</listitem>
				<listitem>
					<simpara>
						Navigate to <emphasis role="strong">Configure</emphasis> &gt; <emphasis role="strong">Environments</emphasis> and click <emphasis role="strong">Import environment from</emphasis>. The button name includes the FQDN of the internal or external Capsule.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Choose the created directory and click <emphasis role="strong">Update</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Log in to the host as the <literal>root</literal> user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Download the script:
					</simpara>
					
<screen># curl -O http://<emphasis>satellite6.example.com</emphasis>/pub/bootstrap.py</screen>
				</listitem>
				<listitem>
					<simpara>
						Make the script executable:
					</simpara>
					
<screen># chmod +x bootstrap.py</screen>
				</listitem>
				<listitem>
					<simpara>
						Confirm that the script is executable by viewing the help text:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								On Red Hat Enterprise Linux 8:
							</simpara>
							
<screen># /usr/libexec/platform-python bootstrap.py -h</screen>
						</listitem>
						<listitem>
							<simpara>
								On other Red Hat Enterprise Linux versions:
							</simpara>
							
<screen># ./bootstrap.py -h</screen>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Enter the bootstrap command with values suitable for your environment.
					</simpara>
					<simpara>
						For the <literal>--server</literal> option, specify the FQDN of Satellite Server or a Capsule Server. For the <literal>--location</literal>, <literal>--organization</literal>, and <literal>--hostgroup</literal> options, use quoted names, not labels, as arguments to the options. See <xref linkend="advanced-bootstrap-script-configuration" /> for advanced use cases.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								On Red Hat Enterprise Linux 8, enter the following command:
							</simpara>
							
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis></screen>
						</listitem>
						<listitem>
							<simpara>
								On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
							</simpara>
							
<screen># ./bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis></screen>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Enter the password of the Satellite user you specified with the <literal>--login</literal> option.
					</simpara>
					<simpara>
						The script sends notices of progress to <emphasis role="strong">stdout</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						When prompted by the script, approve the host’s Puppet certificate. In the Satellite web UI, navigate to <emphasis role="strong">Infrastructure</emphasis> &gt; <emphasis role="strong">Capsules</emphasis> and find the Satellite or Capsule Server you specified with the <literal>--server</literal> option.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the list in the <emphasis role="strong">Actions</emphasis> column, select <emphasis role="strong">Certificates</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Actions</emphasis> column, click <emphasis role="strong">Sign</emphasis> to approve the host’s Puppet certificate.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Return to the host to see the remainder of the bootstrap process completing.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis> and ensure that the host is connected to the correct host group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: After the host registration is complete, remove the script:
					</simpara>
					
<screen># rm bootstrap.py</screen>
				</listitem>
			</orderedlist>
			<section xml:id="setting-permissions-for-the-bootstrap-script">
				<title>Setting Permissions for the Bootstrap Script</title>
				<simpara>
					Use this procedure to configure a Satellite user with the permissions required to run the bootstrap script.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Users</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select an existing user by clicking the required <emphasis role="strong">Username</emphasis>. A new pane opens with tabs to modify information about the selected user. Alternatively, create a new user specifically for the purpose of running this script.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Roles</emphasis> tab.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Edit hosts</emphasis> and <emphasis role="strong">Viewer</emphasis> from the <emphasis role="strong">Roles</emphasis> list.
						</simpara>
						<important>
							<simpara>
								The <emphasis role="strong">Edit hosts</emphasis> role allows the user to edit and delete hosts as well as being able to add hosts. If this is not acceptable to your security policy, create a new role with the following permissions and assign it to the user:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>view_organizations</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_locations</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_domains</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_hostgroups</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_hosts</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_architectures</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_ptables</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>view_operatingsystems</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>create_hosts</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</important>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
				<orderedlist numeration="arabic">
					<title>For CLI Users</title>
					<listitem>
						<simpara>
							Create a role with the minimum permissions required by the bootstrap script. This example creates a role with the name <emphasis>Bootstrap</emphasis>:
						</simpara>
						
<screen># ROLE='Bootstrap'
hammer role create --name "$ROLE"
hammer filter create --role "$ROLE" --permissions view_organizations
hammer filter create --role "$ROLE" --permissions view_locations
hammer filter create --role "$ROLE" --permissions view_domains
hammer filter create --role "$ROLE" --permissions view_hostgroups
hammer filter create --role "$ROLE" --permissions view_hosts
hammer filter create --role "$ROLE" --permissions view_architectures
hammer filter create --role "$ROLE" --permissions view_ptables
hammer filter create --role "$ROLE" --permissions view_operatingsystems
hammer filter create --role "$ROLE" --permissions create_hosts</screen>
					</listitem>
					<listitem>
						<simpara>
							Assign the new role to an existing user:
						</simpara>
						
<screen># hammer user add-role --id <emphasis>user_id</emphasis> --role <emphasis>Bootstrap</emphasis></screen>
						<simpara>
							Alternatively, you can create a new user and assign this new role to them. For more information on creating users with Hammer, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/hammer_cli_guide/chap-cli_guide-managing_users_and_permissions#sect-CLI_Guide-Creating_Users">Creating Users</link> in the <emphasis>Hammer CLI Guide</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="advanced-bootstrap-script-configuration">
				<title>Advanced Bootstrap Script Configuration</title>
				<simpara>
					This section has more examples for using the bootstrap script to register or migrate a host.
				</simpara>
				<warning>
					<simpara>
						These examples specify the <literal>admin</literal> Satellite user. If this is not acceptable to your security policy, create a new role with the minimum permissions required by the bootstrap script. For more information, see <xref linkend="setting-permissions-for-the-bootstrap-script" />.
					</simpara>
				</warning>
				<formalpara>
					<title>Migrating a host from one Satellite 6 to another Satellite 6</title>
					<para>
						Use the script with <literal>--force</literal> to remove the <literal>katello-ca-consumer-*</literal> packages from the old Satellite and install the <literal>katello-ca-consumer-*</literal> packages on the new Satellite.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--force</screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--force</screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Migrating a host from Red Hat Network (RHN) or Satellite 5 to Satellite 6</title>
					<para>
						The bootstrap script detects the presence of <literal>/etc/syconfig/rhn/systemid</literal> and a valid connection to RHN as an indicator that the system is registered to a legacy platform. The script then calls <literal>rhn-classic-migrate-to-rhsm</literal> to migrate the system from RHN. By default, the script does not delete the system’s legacy profile due to auditing reasons. To remove the legacy profile, use <literal>--legacy-purge</literal>, and use <literal>--legacy-login</literal> to supply a user account that has appropriate permissions to remove a profile. Enter the user account password when prompted.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--legacy-purge \
--legacy-login <emphasis>rhn-user</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--legacy-purge \
--legacy-login <emphasis>rhn-user</emphasis></screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Registering a host to Satellite 6, omitting Puppet setup</title>
					<para>
						By default, the bootstrap script configures the host for content management and configuration management. If you have an existing configuration management system and do not want to install Puppet on the host, use <literal>--skip-puppet</literal>.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--skip-puppet</screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--skip-puppet</screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Registering a host to Satellite 6 for content management only</title>
					<para>
						To register a system as a content host, and omit the provisioning and configuration management functions, use <literal>--skip-foreman</literal>.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--server <emphasis>satellite6.example.com</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--skip-foreman</screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --server <emphasis>satellite6.example.com</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--skip-foreman</screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Changing the method the bootstrap script uses to download the consumer RPM</title>
					<para>
						By default, the bootstrap script uses HTTP to download the consumer RPM (<emphasis>server.example.com</emphasis>/pub/katello-ca-consumer-latest.noarch.rpm). In some environments, you might want to allow HTTPS only between the host and Satellite. Use <literal>--download-method</literal> to change the download method from HTTP to HTTPS.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--download-method https</screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--download-method https</screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Providing the host’s IP address to Satellite</title>
					<para>
						On hosts with multiple interfaces or multiple IP addresses on one interface, you might need to override the auto-detection of the IP address and provide a specific IP address to Satellite. Use <literal>--ip</literal>.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--ip <emphasis>192.x.x.x</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--ip <emphasis>192.x.x.x</emphasis></screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Enabling remote execution on the host</title>
					<para>
						Use <literal>--rex</literal> and <literal>--rex-user</literal> to enable remote execution and add the required SSH keys for the specified user.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--rex \
--rex-user <emphasis>root</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--rex \
--rex-user <emphasis>root</emphasis></screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Creating a domain for a host during registration</title>
					<para>
						To create a host record, the DNS domain of a host needs to exist in Satellite prior to running the script. If the domain does not exist, add it using <literal>--add-domain</literal>.
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 8, enter the following command:
						</simpara>
						
<screen># /usr/libexec/platform-python bootstrap.py \
--login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--add-domain</screen>
					</listitem>
					<listitem>
						<simpara>
							On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
						</simpara>
						
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--add-domain</screen>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Providing an alternative FQDN for the host</title>
					<para>
						If the host’s host name is not an FQDN, or is not RFC-compliant (containing a character such as an underscore), the script will fail at the host name validation stage. If you cannot update the host to use an FQDN that is accepted by Satellite, you can use the bootstrap script to specify an alternative FQDN.
					</para>
				</formalpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Set <literal>create_new_host_when_facts_are_uploaded</literal> and <literal>create_new_host_when_report_is_uploaded</literal> to false using Hammer:
						</simpara>
						
<screen># hammer settings set \
--name  create_new_host_when_facts_are_uploaded \
--value false
# hammer settings set \
--name  create_new_host_when_report_is_uploaded \
--value false</screen>
					</listitem>
					<listitem>
						<simpara>
							Use <literal>--fqdn</literal> to specify the FQDN that will be reported to Satellite:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									On Red Hat Enterprise Linux 8, enter the following command:
								</simpara>
								
<screen># /usr/libexec/platform-python bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--fqdn <emphasis>node100.example.com</emphasis></screen>
							</listitem>
							<listitem>
								<simpara>
									On Red Hat Enterprise Linux 5, 6, or 7, enter the following command:
								</simpara>
								
<screen># bootstrap.py --login=<emphasis>admin</emphasis> \
--server <emphasis>satellite6.example.com</emphasis> \
--location=<emphasis>"Example Location"</emphasis> \
--organization=<emphasis>"Example Organization"</emphasis> \
--hostgroup=<emphasis>"Example Host Group"</emphasis> \
--activationkey=<emphasis>activation_key</emphasis> \
--fqdn <emphasis>node100.example.com</emphasis></screen>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
		</section>
		<section xml:id="installing-the-katello-agent_managing-hosts">
			<title>Installing the Katello Agent</title>
			<simpara>
				To remotely update Satellite clients, you must install the Katello agent.
			</simpara>
			<simpara>
				The <literal>katello-agent</literal> package depends on the <literal>gofer</literal> package that provides the <literal>goferd</literal> service. This service must be enabled so that Satellite Server or Capsule Server can provide information about errata that are applicable for content hosts.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					Before installing the Katello agent, ensure the following conditions are met:
				</para>
			</formalpara>
			<itemizedlist>
				<listitem>
					<simpara>
						You have enabled the Satellite Tools repository on Satellite Server. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/installing_satellite_server_from_a_connected_network/performing_additional_configuration_on_satellite_server#enabling_satellite_tools_repository">Enabling the Satellite Tools Repository</link> in <emphasis>Installing Satellite Server from a Connected Network</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have synchronized the Satellite Tools repository on Satellite Server. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/installing_satellite_server_from_a_connected_network/performing_additional_configuration_on_satellite_server#synchronizing_satellite_tools_repository">Synchronizing the Satellite Tools Repository</link> in <emphasis>Installing Satellite Server from a Connected Network</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have enabled the rhel-7-server-satellite-tools-6.7-rpms repository on the client.
					</simpara>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>Procedure</title>
				<para>
					To install the Katello agent, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Install the <literal>katello-agent</literal> package:
					</simpara>
					
<screen># yum install katello-agent</screen>
				</listitem>
				<listitem>
					<simpara>
						Start the <literal>goferd</literal> service :
					</simpara>
					
<screen># systemctl start goferd</screen>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="installing-tracer">
			<title>Installing Tracer</title>
			<simpara>
				Use this procedure to install Tracer on Red Hat Satellite 6.7, and access Traces. Tracer displays a list of services and applications that are outdated and need to be restarted. Traces is the output generated by Tracer in the Satellite web UI.
			</simpara>
			<important>
				<simpara>
					The integration of Tracer with Satellite Server is a Technology Preview feature. Technology Preview features are not fully supported under Red Hat Subscription Service Level Agreements (SLAs), may not be functionally complete, and are not intended for production use. These features provide early access to upcoming product innovations, enabling customers to test functionality and provide feedback during the development process. For more information see <link xlink:href="https://access.redhat.com/support/offerings/techpreview/">Red Hat Technology Preview Features Support Scope</link>.
				</simpara>
			</important>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						The host must be registered to Red Hat Satellite.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The Red Hat Satellite Tools 6.7 repository must be enabled and synchronized on Satellite Server, and enabled on the host.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						On the content host, install the <literal>katello-host-tools-tracer</literal> RPM package:
					</simpara>
					
<screen># yum install katello-host-tools-tracer</screen>
				</listitem>
				<listitem>
					<simpara>
						Enter the following command:
					</simpara>
					
<screen># katello-tracer-upload</screen>
				</listitem>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>, then click the required host name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Properties</emphasis> tab, examine the <emphasis role="strong">Properties</emphasis> table and find the Traces item. If you cannot find a Traces item in the <emphasis role="strong">Properties</emphasis> table, then Tracer is not installed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Content Hosts</emphasis>, then click the required host name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Traces</emphasis> tab to view Traces.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="installing-and-configuring-the-puppet-agent">
			<title>Installing and Configuring the Puppet Agent</title>
			<simpara>
				Use this procedure to install and configure the Puppet agent on a host. For more information about Puppet, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/puppet_guide/"><emphasis>Puppet Guide</emphasis></link>.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						The host must be registered to Red Hat Satellite.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The host must have a Puppet environment assigned to it.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The Red Hat Satellite Tools 6.7 repository must be enabled and synchronized on Satellite Server, and enabled on the host.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Log in to the host as the <literal>root</literal> user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Install the Puppet agent package:
					</simpara>
					
<screen># yum install puppet-agent</screen>
				</listitem>
				<listitem>
					<simpara>
						Configure the Puppet agent to start on boot:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								On Red Hat Enterprise Linux 6:
							</simpara>
							
<screen># chkconfig puppet on</screen>
						</listitem>
						<listitem>
							<simpara>
								On Red Hat Enterprise Linux 7:
							</simpara>
							
<screen># systemctl enable puppet</screen>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Append the following server and environment settings to the <literal>/etc/puppetlabs/puppet/puppet.conf</literal> file. Set the <literal>environment</literal> parameter to the name of the Puppet environment to which the host belongs:
					</simpara>
					
<screen>environment = <emphasis>My_Example_Org_Library</emphasis>
server = <emphasis>satellite.example.com</emphasis>
ca_server = <emphasis>satellite.example.com</emphasis></screen>
				</listitem>
				<listitem>
					<simpara>
						Run the Puppet agent on the host:
					</simpara>
					
<screen># puppet agent -t</screen>
				</listitem>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Infrastructure</emphasis> &gt; <emphasis role="strong">Capsules</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the list in the <emphasis role="strong">Actions</emphasis> column for the required Capsule Server, select <emphasis role="strong">Certificates</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Sign</emphasis> to the right of the required host to sign the SSL certificate for the Puppet client.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter the <literal>puppet agent</literal> command again:
					</simpara>
					
<screen># puppet agent -t</screen>
				</listitem>
			</orderedlist>
		</section>
	</chapter>
	<chapter xml:id="Adding_Network_Interfaces">
		<title>Adding Network Interfaces</title>
		<simpara>
			Red Hat Satellite supports specifying multiple network interfaces for a single host. You can configure these interfaces when creating a new host as described in <xref linkend="creating-a-host-in-satellite" /> or when editing an existing host.
		</simpara>
		<simpara>
			There are several types of network interfaces that you can attach to a host. When adding a new interface, select one of:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					<emphasis role="strong">Interface</emphasis>: Allows you to specify an additional physical or virtual interface. There are two types of virtual interfaces you can create. Use <emphasis role="strong">VLAN</emphasis> when the host needs to communicate with several (virtual) networks using a single interface, while these networks are not accessible to each other. Use <emphasis role="strong">alias</emphasis> to add an additional IP address to an existing interface.
				</simpara>
				<simpara>
					For more information about adding a physical interface, see <xref linkend="adding-a-physical-interface" />.
				</simpara>
				<simpara>
					For more information about adding a virtual interface, see <xref linkend="adding-a-virtual-interface" />.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<emphasis role="strong">Bond</emphasis>: Creates a bonded interface. NIC bonding is a way to bind multiple network interfaces together into a single interface that appears as a single device and has a single MAC address. This enables two or more network interfaces to act as one, increasing the bandwidth and providing redundancy. See <xref linkend="adding-a-bonded-interface" /> for details.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<emphasis role="strong">BMC</emphasis>: Baseboard Management Controller (BMC) allows you to remotely monitor and manage the physical state of machines. For more information about BMC, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/installing_satellite_server_from_a_connected_network/performing_additional_configuration_on_satellite_server#enabling-power-management-on-managed-hosts_satellite">Enabling Power Management on Managed Hosts</link> in <emphasis>Installing Satellite Server from a Connected Network</emphasis>. For more information about configuring BMC interfaces, see <xref linkend="adding-a-bmc-interface" />.
				</simpara>
			</listitem>
		</itemizedlist>
		<note>
			<simpara>
				Additional interfaces have the <emphasis role="strong">Managed</emphasis> flag enabled by default, which means the new interface is configured automatically during provisioning by the DNS and DHCP Capsule Servers associated with the selected subnet. This requires a subnet with correctly configured DNS and DHCP Capsule Servers. If you use a Kickstart method for host provisioning, configuration files are automatically created for managed interfaces in the post-installation phase at <literal>/etc/sysconfig/network-scripts/ifcfg-<emphasis>interface_id</emphasis></literal>.
			</simpara>
		</note>
		<note>
			<simpara>
				Virtual and bonded interfaces currently require a MAC address of a physical device. Therefore, the configuration of these interfaces works only on bare-metal hosts.
			</simpara>
		</note>
		<section xml:id="adding-a-physical-interface">
			<title>Adding a Physical Interface</title>
			<simpara>
				Use this procedure to add an additional physical interface to a host.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Edit</emphasis> next to the host you want to edit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Interfaces</emphasis> tab, click <emphasis role="strong">Add Interface</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Keep the <emphasis role="strong">Interface</emphasis> option selected in the <emphasis role="strong">Type</emphasis> list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify a <emphasis role="strong">MAC address</emphasis>. This setting is required.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the <emphasis role="strong">Device Identifier</emphasis>, for example <emphasis role="strong">eth0</emphasis>. The identifier is used to specify this physical interface when creating bonded interfaces, VLANs, and aliases.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the <emphasis role="strong">DNS name</emphasis> associated with the host’s IP address. Satellite saves this name in the Capsule Server associated with the selected domain (the "DNS A" field) and the Capsule Server associated with the selected subnet (the "DNS PTR" field). A single host can therefore have several DNS entries.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select a domain from the <emphasis role="strong">Domain</emphasis> list. To create and manage domains, navigate to <emphasis role="strong">Infrastructure</emphasis> &gt; <emphasis role="strong">Domains</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select a subnet from the <emphasis role="strong">Subnet</emphasis> list. To create and manage subnets, navigate to <emphasis role="strong">Infrastructure</emphasis> &gt; <emphasis role="strong">Subnets</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the <emphasis role="strong">IP address</emphasis>. Managed interfaces with an assigned DHCP Capsule Server require this setting for creating a DHCP lease. DHCP-enabled managed interfaces are automatically provided with a suggested IP address.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether the interface is <emphasis role="strong">Managed</emphasis>. If the interface is managed, configuration is pulled from the associated Capsule Server during provisioning, and DNS and DHCP entries are created. If using kickstart provisioning, a configuration file is automatically created for the interface.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether this is the <emphasis role="strong">Primary</emphasis> interface for the host. The DNS name from the primary interface is used as the host portion of the FQDN.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether this is the <emphasis role="strong">Provision</emphasis> interface for the host. TFTP boot takes place using the provisioning interface. For image-based provisioning, the script to complete the provisioning is executed through the provisioning interface.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether to use the interface for <emphasis role="strong">Remote execution</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Leave the <emphasis role="strong">Virtual NIC</emphasis> check box clear.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">OK</emphasis> to save the interface configuration.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to apply the changes to the host.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="adding-a-virtual-interface">
			<title>Adding a Virtual Interface</title>
			<simpara>
				Use this procedure to configure a virtual interface for a host. This can be either a VLAN or an alias interface.
			</simpara>
			<simpara>
				An alias interface is an additional IP address attached to an existing interface. An alias interface automatically inherits a MAC address from the interface it is attached to; therefore, you can create an alias without specifying a MAC address. The interface must be specified in a subnet with boot mode set to <literal>static</literal>.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Edit</emphasis> next to the host you want to edit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Interfaces</emphasis> tab, click <emphasis role="strong">Add Interface</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Keep the <emphasis role="strong">Interface</emphasis> option selected in the <emphasis role="strong">Type</emphasis> list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the general interface settings. The applicable configuration options are the same as for the physical interfaces described in <xref linkend="adding-a-physical-interface" />.
					</simpara>
					<simpara>
						Specify a <emphasis role="strong">MAC address</emphasis> for managed virtual interfaces so that the configuration files for provisioning are generated correctly. However, a <emphasis role="strong">MAC address</emphasis> is not required for virtual interfaces that are not managed.
					</simpara>
					<simpara>
						If creating a VLAN, specify ID in the form of <emphasis role="strong">eth1.10</emphasis> in the <emphasis role="strong">Device Identifier</emphasis> field. If creating an alias, use ID in the form of <emphasis role="strong">eth1:10</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Virtual NIC</emphasis> check box. Additional configuration options specific to virtual interfaces are appended to the form:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Tag</emphasis>: Optionally set a VLAN tag to trunk a network segment from the physical network through to the virtual interface. If you do not specify a tag, managed interfaces inherit the VLAN tag of the associated subnet. User-specified entries from this field are not applied to alias interfaces.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Attached to</emphasis>: Specify the identifier of the physical interface to which the virtual interface belongs, for example <emphasis role="strong">eth1</emphasis>. This setting is required.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">OK</emphasis> to save the interface configuration.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to apply the changes to the host.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="adding-a-bonded-interface">
			<title>Adding a Bonded Interface</title>
			<simpara>
				Use this procedure to configure a bonded interface for a host.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Edit</emphasis> next to the host you want to edit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Interfaces</emphasis> tab, click <emphasis role="strong">Add Interface</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select <emphasis role="strong">Bond</emphasis> from the <emphasis role="strong">Type</emphasis> list. Additional type-specific configuration options are appended to the form.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the general interface settings. The applicable configuration options are the same as for the physical interfaces described in <xref linkend="adding-a-physical-interface" />.
					</simpara>
					<simpara>
						Bonded interfaces use IDs in the form of <emphasis role="strong">bond0</emphasis> in the <emphasis role="strong">Device Identifier</emphasis> field.
					</simpara>
					<simpara>
						A single <emphasis role="strong">MAC address</emphasis> is sufficient.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the configuration options specific to bonded interfaces:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Mode</emphasis>: Select the bonding mode that defines a policy for fault tolerance and load balancing. See <xref linkend="Bonding_Modes_Available_in_Red_Hat_Satellite" /> for a brief description of each bonding mode.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Attached devices</emphasis>: Specify a comma-separated list of identifiers of attached devices. These can be physical interfaces or VLANs.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Bond options</emphasis>: Specify a space-separated list of configuration options, for example <emphasis role="strong">miimon=100</emphasis>. See the <link xlink:href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/index.html">Red Hat Enterprise Linux 7 Networking Guide</link> for details of the configuration options you can specify for the bonded interface.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">OK</emphasis> to save the interface configuration.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to apply the changes to the host.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					To create a host with a bonded interface, enter the following command:
				</para>
			</formalpara>
			
<screen># hammer host create --name bonded_interface \
--hostgroup-id <emphasis>1</emphasis> \
--ip=<emphasis>192.168.100.123</emphasis> \
--mac=<emphasis>52:54:00:14:92:2a</emphasis> \
--subnet-id=<emphasis>1</emphasis> \
--managed true \
   --interface="identifier=<emphasis>eth1</emphasis>, \
               mac=<emphasis>52:54:00:62:43:06</emphasis>, \
               managed=true, \
               type=Nic::Managed, \
               domain_id=<emphasis>1</emphasis>, \
               subnet_id=<emphasis>1</emphasis>" \
   --interface="identifier=<emphasis>eth2</emphasis>, \
               mac=<emphasis>52:54:00:d3:87:8f</emphasis>, \
               managed=true, \
               type=Nic::Managed, \
               domain_id=<emphasis>1</emphasis>, \
               subnet_id=<emphasis>1</emphasis>" \
   --interface="identifier=<emphasis>bond0</emphasis>, \
               ip=<emphasis>172.25.18.123</emphasis>, \
               type=Nic::Bond, \
               mode=active-backup, \
               attached_devices=[<emphasis>eth1,eth2</emphasis>], \
               managed=true, \
               domain_id=<emphasis>1</emphasis>, \
               subnet_id=<emphasis>1</emphasis>" \
--organization "<emphasis>Your_Organization</emphasis>" \
--location "<emphasis>Your_Location</emphasis>" \
--ask-root-password yes</screen>
			<table colsep="1" frame="all" rowsep="1" xml:id="Bonding_Modes_Available_in_Red_Hat_Satellite">
				<title>Bonding Modes Available in Red Hat Satellite</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="50*"></colspec>
					<colspec colname="col_2" colwidth="50*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Bonding Mode</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								balance-rr
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Transmissions are received and sent sequentially on each bonded interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								active-backup
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Transmissions are received and sent through the first available bonded interface. Another bonded interface is only used if the active bonded interface fails.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								balance-xor
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Transmissions are based on the selected hash policy. In this mode, traffic destined for specific peers is always sent over the same interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								broadcast
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								All transmissions are sent on all bonded interfaces.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								802.a3
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Creates aggregation groups that share the same settings. Transmits and receives on all interfaces in the active group.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								balance-tlb
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The outgoing traffic is distributed according to the current load on each bonded interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								balance-alb
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Receive load balancing is achieved through Address Resolution Protocol (ARP) negotiation.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section xml:id="adding-a-bmc-interface">
			<title>Adding a Baseboard Management Controller (BMC) Interface</title>
			<simpara>
				Use this procedure to configure a baseboard management controller (BMC) interface for a host that supports this feature.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						The <literal>ipmitool</literal> package is installed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You know the MAC address, IP address, and other details of the BMC interface on the host, and the appropriate credentials for that interface.
					</simpara>
					<note>
						<simpara>
							You only need the MAC address for the BMC interface if the BMC interface is managed, so that it can create a DHCP reservation.
						</simpara>
					</note>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Enable BMC on the Capsule server if it is not already enabled:
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Configure BMC power management on the Capsule Server by running the <literal>satellite-installer</literal> script with the following options:
							</simpara>
							
<screen># satellite-installer --foreman-proxy-bmc=true \
--foreman-proxy-bmc-default-provider=ipmitool</screen>
						</listitem>
						<listitem>
							<simpara>
								In the Satellite web UI, navigate to <emphasis role="strong">Infrastructure</emphasis> &gt; <emphasis role="strong">Capsules</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the list in the <emphasis role="strong">Actions</emphasis> column, click <emphasis role="strong">Refresh</emphasis>. The list in the <emphasis role="strong">Features</emphasis> column should now include BMC.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Edit</emphasis> next to the host you want to edit.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Interfaces</emphasis> tab, click <emphasis role="strong">Add Interface</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select <emphasis role="strong">BMC</emphasis> from the <emphasis role="strong">Type</emphasis> list. Type-specific configuration options are appended to the form.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the general interface settings. The applicable configuration options are the same as for the physical interfaces described in <xref linkend="adding-a-physical-interface" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify the configuration options specific to BMC interfaces:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Username</emphasis> and <emphasis role="strong">Password</emphasis>: Specify any authentication credentials required by BMC.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Provider</emphasis>: Specify the BMC provider.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">OK</emphasis> to save the interface configuration.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to apply the changes to the host.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
	</chapter>
	<chapter xml:id="host_management_and_monitoring_using_red_hat_web_console">
		<title>Host Management and Monitoring Using Red Hat Web Console</title>
		<simpara>
			Red Hat web console is an interactive web interface that you can use to perform actions and monitor Red Hat Enterprise Linux hosts. You can enable a remote-execution feature to integrate Satellite with Red Hat web console. When you install Red Hat web console on a host that you manage with Satellite, you can view the Red Hat web console dashboards of that host from within the Satellite web UI. You can also use the features that are integrated with Red Hat web console, for example, Red Hat Image Builder.
		</simpara>
		<section xml:id="integrating_satellite_with_red_hat_web_console">
			<title>Integrating Satellite with Red Hat Web Console</title>
			<simpara>
				By default, Red Hat web console integration is disabled in Satellite. If you want to access Red Hat web console features for your hosts from within Satellite, you must first enable Red Hat web console integration on Satellite Server.
			</simpara>
			<itemizedlist>
				<title>Procedure</title>
				<listitem>
					<simpara>
						On Satellite Server, run <literal>satellite-installer</literal> with the <literal>--enable-foreman-plugin-remote-execution-cockpit</literal> option:
					</simpara>
					
<screen># satellite-installer --enable-foreman-plugin-remote-execution-cockpit</screen>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="managing_and_monitoring_hosts_using_red_hat_web_console">
			<title>Managing and Monitoring Hosts Using Red Hat Web Console</title>
			<simpara>
				You can access the Red Hat web console web UI through the Satellite web UI and use the functionality to manage and monitor hosts in Satellite.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat web console is enabled in Satellite.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat web console is installed on the host that you want to view:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								For Red Hat Enterprise Linux 8, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_systems_using_the_rhel_8_web_console/getting-started-with-the-rhel-8-web-console_system-management-using-the-rhel-8-web-console#installing-the-web-console_getting-started-with-the-rhel-8-web-console">Installing the web console</link> in the <emphasis>Managing systems using the RHEL 8 web console</emphasis> guide.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								For Red Hat Enterprise Linux 7, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/managing_systems_using_the_rhel_7_web_console/getting-started-with-the-rhel-web-console_system-management-using-the-rhel-7-web-console#installing-the-web-console_getting-started-with-the-web-console">Installing the web console</link> in the <emphasis>Managing systems using the RHEL 7 web console</emphasis> guide.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Satellite or Capsule can authenticate to the host with SSH keys. For more information, <xref linkend="sect-Managing_Hosts-Establishing_a_Secure_Connection_for_Remote_Commands" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis> and select the host that you want to manage and monitor with Red Hat web console.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper right of the host window, click <emphasis role="strong">Web Console</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				You can now access the full range of features available for host monitoring and management, for example, Red Hat Image Builder, through the Red Hat web console.
			</simpara>
			<simpara>
				For more information about getting started with Red Hat web console, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_systems_using_the_rhel_8_web_console/index"><emphasis>Managing systems using the RHEL 8 web console</emphasis></link> guide or the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/managing_systems_using_the_rhel_7_web_console/getting-started-with-the-rhel-web-console_system-management-using-the-rhel-7-web-console#installing-the-web-console_getting-started-with-the-web-console"><emphasis>Managing systems using the RHEL 7 web console</emphasis></link> guide.
			</simpara>
			<simpara>
				For more information about using Red Hat Image Builder through the Red Hat web console, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/composing_a_customized_rhel_system_image/creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image#accessing-composer-gui-in-the-rhel-8-web-console_creating-system-images-with-composer-web-console-interface">Accessing Image Builder GUI in the RHEL 8 web console</link> or <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/image_builder_guide/chap-documentation-image_builder-test_chapter_4#sect-Documentation-Image_Builder-Chapter4">Accessing Image Builder GUI in the RHEL 7 web console</link>.
			</simpara>
		</section>
	</chapter>
	<chapter xml:id="Monitoring_Hosts">
		<title>Monitoring Hosts Using Red Hat Insights</title>
		<simpara>
			In this chapter, you can find information about creating host monitoring reports and monitoring your hosts using Red Hat Insights and creating an Insights plan.
		</simpara>
		<section xml:id="using-insights-with-satellite-hosts">
			<title>Using Red Hat Insights with Hosts in Satellite</title>
			<simpara>
				You can use Red Hat Insights to diagnose systems and downtime related to security exploits, performance degradation and stability failures. You can use the dashboard to quickly identify key risks to stability, security, and performance. You can sort by category, view details of the impact and resolution, and then determine what systems are affected.
			</simpara>
			<simpara>
				To use Red Hat Insights to monitor hosts that you manage with Satellite, you must first install Red Hat Insights on your hosts and register your hosts with Red Hat Insights.
			</simpara>
			<simpara>
				To install and register your host using Puppet, or manually, see <link xlink:href="https://access.redhat.com/products/red-hat-insights/#getstarted">Red Hat Insights Getting Started</link>.
			</simpara>
			<formalpara>
				<title>Deploying Red Hat Insights using the Ansible Role</title>
				<para>
					You can automate the installation and registration of hosts with Red Hat Insights using the <emphasis role="strong">RedHatInsights.insights-client</emphasis> Ansible role. For more information about adding this role to your Satellite, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/administering_red_hat_satellite/chap-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Managing_Ansible_Roles">Managing Ansible Roles</link>.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Add the <emphasis role="strong">RedHatInsights.insights-client</emphasis> role to the hosts.
					</simpara>
					<simpara>
						For new hosts, see <xref linkend="creating-a-host-in-satellite" />.
					</simpara>
					<simpara>
						For existing hosts, see <xref linkend="Using_Ansible_Roles" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To run the <emphasis role="strong">RedHatInsights.insights-client</emphasis> role on your host, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis> and click the name of the host that you want to use.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Run Ansible roles</emphasis> button.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				When the role completes, you can view and work with the host that you add on the <emphasis role="strong">Insights</emphasis> &gt; <emphasis role="strong">Overview</emphasis> page of the Satellite web UI.
			</simpara>
			<itemizedlist>
				<title>Additional Information</title>
				<listitem>
					<simpara>
						To apply any system updates to the Red Hat Insights plug-in, enter <literal>httpd restart</literal> after updating.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To view the logs for Red Hat Insights and all plug-ins, go to <literal>/var/log/foreman/production.log</literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						If you have problems connecting to Red Hat Insights, ensure that your certificates are up-to-date. Refresh your subscription manifest to update your certificates.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You can change the default schedule for running <literal>insights-client</literal> by configuring <literal>insights-client.timer</literal> on a host. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_insights/1.0/html/client_configuration_guide_for_red_hat_insights/changing-the-client-schedule"> Changing the insights-client schedule</link> in the <emphasis>Client Configuration Guide for Red Hat Insights</emphasis>.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="creating-an-insights-plan">
			<title>Creating an Insights Plan for Hosts</title>
			<simpara>
				With Satellite 6, you can create a Red Hat Insights remediation plan and run the plan on Satellite hosts.
			</simpara>
			<formalpara>
				<title>Procedure</title>
				<para>
					To create the plan, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Insights</emphasis> &gt; <emphasis role="strong">Inventory</emphasis>, and select the hosts that you want to include in an Insights plan.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Actions</emphasis> list, select <emphasis role="strong">Create a new Plan/Playbook</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the Plan/Playbook Builder window, select <emphasis role="strong">Create new plan</emphasis> and enter a name for the plan.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether you want the rule to apply to a specific system, group, or all systems.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select one or more rules that you want to add to the plan. Use the <emphasis role="strong">Filter</emphasis> field to search for specific keywords.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the Planner window, select <emphasis role="strong">Run Playbook</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				In the Jobs window, you can view the progress of your plan as the playbook runs.
			</simpara>
			<simpara>
				You can view the Insights plan by navigating to <emphasis role="strong">Insights</emphasis> &gt; <emphasis role="strong">Planner</emphasis>.
			</simpara>
		</section>
	</chapter>
	<chapter xml:id="using_report_templates">
		<title>Using Report Templates to Monitor Hosts</title>
		<simpara>
			You can use report templates to query Satellite data to obtain information about, for example, host status, registered hosts, applicable errata, applied errata, subscription details, and user activity. You can use the report templates that ship with Satellite or write your own custom report templates to suit your requirements. The reporting engine uses the embedded Ruby (ERB) syntax. For more information about writing templates and ERB syntax, see <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
		</simpara>
		<simpara>
			You can create a template, or clone a template and edit the clone. For help with the template syntax, click a template and click the <emphasis role="strong">Help</emphasis> tab.
		</simpara>
		<section xml:id="chap-Managing_Hosts-Generating_Host_Monitoring_Reports">
			<title>Generating Host Monitoring Reports</title>
			<simpara>
				To view the report templates, in the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>.
			</simpara>
			<simpara>
				To schedule reports, you can configure a cron job or use the Satellite web UI.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To the right of the report template that you want to use, click <emphasis role="strong">Generate</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: To schedule a report, to the right of the <emphasis role="strong">Generate at</emphasis> field, click the icon to select the date and time you want to generate the report at.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: To send a report to an e-mail address, select the <emphasis role="strong">Send report via e-mail</emphasis> check box, and in the <emphasis role="strong">Deliver to e-mail addresses</emphasis> field, enter the required e-mail address.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: Apply search query filters. To view all available results, do not populate the filter field with any values.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>. A CSV file that contains the report is downloaded. If you have selected the <emphasis role="strong">Send report via e-mail</emphasis> check box, the host monitoring report is sent to your e-mail address.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					To generate a report, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						List all available report templates:
					</simpara>
					
<screen># hammer report-template list</screen>
				</listitem>
				<listitem>
					<simpara>
						Generate a report:
					</simpara>
					
<screen># hammer report-template generate --id <emphasis>template ID</emphasis></screen>
					<simpara>
						This command waits until the report fully generates before completing. If you want to generate the report as a background task, you can use the <literal>hammer report-template schedule</literal> command.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="proc_creating_a_report_template">
			<title>Creating a Report Template</title>
			<simpara>
				In Satellite, you can create a report template and customize the template to suit your requirements. You can import existing report templates and further customize them with snippets and template macros.
			</simpara>
			<simpara>
				Report templates use Embedded Ruby (ERB) syntax. To view information about working with ERB syntax and macros, in the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>, and click <emphasis role="strong">Create Template</emphasis>, and then click the <emphasis role="strong">Help</emphasis> tab.
			</simpara>
			<simpara>
				When you create a report template in Satellite, safe mode is enabled by default. For more information about safe mode, see <xref linkend="con_report_templates_safe_mode" />.
			</simpara>
			<simpara>
				For more information about writing templates, see the <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
			</simpara>
			<simpara>
				To view a step by step example of populating a template, see <xref linkend="proc_creating_a_report_table_to_monitor_entitlements" />.
			</simpara>
			<simpara>
				For more information about macros you can use in report templates, see <xref linkend="ref_template_macros" />.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>, and click <emphasis role="strong">Create Template</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Name</emphasis> field, enter a unique name for your report template.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						If you want the template to be available to all locations and organizations, select <emphasis role="strong">Default</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create the template directly in the template editor or import a template from a text file by clicking <emphasis role="strong">Import</emphasis>. For more information about importing templates, see <xref linkend="importing_report_templates" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: In the <emphasis role="strong">Audit Comment</emphasis> field, you can add any useful information about this template.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Input</emphasis> tab, and in the <emphasis role="strong">Name</emphasis> field, enter a name for the input that you can reference in the template in the following format: <literal>input('name')</literal>. Note that you must save the template before you can reference this input value in the template body.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select whether the input value is mandatory. If the input value is mandatory, select the <emphasis role="strong">Required</emphasis> check box.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Value Type</emphasis> list, select the type of input value that the user must input.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: If you want to use facts for template input, select the <emphasis role="strong">Advanced</emphasis> check box.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: In the <emphasis role="strong">Options</emphasis> field, define the options that the user can select from. If this field remains undefined, the users receive a free-text field in which they can enter the value they want.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: In the <emphasis role="strong">Default</emphasis> field, enter a value, for example, a host name, that you want to set as the default template input.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: In the <emphasis role="strong">Description</emphasis> field, you can enter information that you want to display as inline help about the input when you generate the report.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: Click the <emphasis role="strong">Type</emphasis> tab, and select whether this template is a snippet to be included in other templates,
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Location</emphasis> tab and add the locations where you want to use the template.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Organizations</emphasis> tab and add the organizations where you want to use the template.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to save your changes.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="exporting_report_templates">
			<title>Exporting Report Templates</title>
			<simpara>
				You can export report templates that you create in Satellite.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Locate the template that you want to export, and from the list in the <emphasis role="strong">Actions</emphasis> column, select <emphasis role="strong">Export</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Repeat this action for every report template that you want to download.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				An <literal>.erb</literal> file that contains the template downloads.
			</simpara>
			<orderedlist numeration="arabic">
				<title>For CLI Users</title>
				<listitem>
					<simpara>
						To view the report templates available for export, enter the following command:
					</simpara>
					
<screen># hammer report-template list</screen>
					<simpara>
						Note the template ID of the template that you want to export in the output of this command.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To export a report template, enter the following command:
					</simpara>
					
<screen># hammer report-template dump --id <emphasis>template_ID</emphasis> &gt; <emphasis>example_export</emphasis>.erb</screen>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="proc_exporting_report_templates_api">
			<title>Exporting Report Templates Using the Satellite API</title>
			<simpara>
				You can use the Satellite <literal>report_templates</literal> API to export report templates from Satellite. For more information about using the Satellite API, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/api_guide/index">API Guide</link>.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Use the following request to retrieve a list of available report templates:
					</simpara>
					<formalpara>
						<title>Example request:</title>
						<para>
							
<screen>$ curl --insecure --user admin:redhat \
--request GET \
--config https://<emphasis>satellite.example.com</emphasis>/api/report_templates \
| json_reformat</screen>
						</para>
					</formalpara>
					<simpara>
						In this example, the <literal>json_reformat</literal> tool is used to format the JSON output.
					</simpara>
					<formalpara>
						<title>Example response:</title>
						<para>
							
<screen>{
    "total": 6,
    "subtotal": 6,
    "page": 1,
    "per_page": 20,
    "search": null,
    "sort": {
        "by": null,
        "order": null
    },
    "results": [
        {
            "created_at": "2019-11-20 17:49:52 UTC",
            "updated_at": "2019-11-20 17:49:52 UTC",
            "name": "Applicable errata",
            "id": 112
        },
        {
            "created_at": "2019-11-20 17:49:52 UTC",
            "updated_at": "2019-11-20 17:49:52 UTC",
            "name": "Applied Errata",
            "id": 113
        },
        {
            "created_at": "2019-11-30 16:15:24 UTC",
            "updated_at": "2019-11-30 16:15:24 UTC",
            "name": "Hosts - complete list",
            "id": 158
        },
        {
            "created_at": "2019-11-20 17:49:52 UTC",
            "updated_at": "2019-11-20 17:49:52 UTC",
            "name": "Host statuses",
            "id": 114
        },
        {
            "created_at": "2019-11-20 17:49:52 UTC",
            "updated_at": "2019-11-20 17:49:52 UTC",
            "name": "Registered hosts",
            "id": 115
        },
        {
            "created_at": "2019-11-20 17:49:52 UTC",
            "updated_at": "2019-11-20 17:49:52 UTC",
            "name": "Subscriptions",
            "id": 116
        }
    ]
}</screen>
						</para>
					</formalpara>
				</listitem>
				<listitem>
					<simpara>
						Note the <literal>id</literal> of the template that you want to export, and use the following request to export the template:
					</simpara>
					<formalpara>
						<title>Example request:</title>
						<para>
							
<screen>$ curl --insecure --output <emphasis>/tmp/_Example_Export_Template</emphasis>.erb_ \
--user <emphasis>admin:password</emphasis> --request GET --config \
https://<emphasis>satellite.example.com</emphasis>/api/report_templates/<emphasis>158</emphasis>/export</screen>
						</para>
					</formalpara>
					<simpara>
						Note that <literal>158</literal> is an example ID of the template to export.
					</simpara>
					<simpara>
						In this example, the exported template is redirected to <literal>host_complete_list.erb</literal>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="importing_report_templates">
			<title>Importing Report Templates</title>
			<simpara>
				You can import a report template into the body of a new template that you want to create. Note that using the web UI, you can only import templates individually. For bulk actions, use the Satellite API. For more information, see <xref linkend="proc_importing_report_templates_api" />.
			</simpara>
			<itemizedlist>
				<title>Prerequisite</title>
				<listitem>
					<simpara>
						You must have exported templates from Satellite to import them to use in new templates. For more information see <xref linkend="exporting_report_templates" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>, and in the upper right of the Report Templates window, click <emphasis role="strong">Create Template</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the upper right of the <emphasis role="strong">Editor</emphasis> tab, click the folder icon, and select the <literal>.erb</literal> file that you want to import.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Edit the template to suit your requirements, and click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				For more information about customizing your new template, see <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
			</simpara>
		</section>
		<section xml:id="proc_importing_report_templates_api">
			<title>Importing Report Templates Using the Satellite API</title>
			<simpara>
				You can use the Satellite API to import report templates into Satellite. Importing report templates using the Satellite API automatically parses the report template metadata and assigns organizations and locations. For more information about using the Satellite API, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/api_guide/index">API Guide</link>.
			</simpara>
			<itemizedlist>
				<title>Prerequisite</title>
				<listitem>
					<simpara>
						Create a template using <literal>.erb</literal> syntax or export a template from another Satellite.
					</simpara>
					<simpara>
						For more information about writing templates, see <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
					</simpara>
					<simpara>
						For more information about exporting templates from Satellite, see <xref linkend="proc_exporting_report_templates_api" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Use the following example to format the template that you want to import to a <literal>.json</literal> file:
					</simpara>
					
<screen># cat <emphasis>Example_Template</emphasis>.json
{
    "name": "<emphasis>Example Template Name</emphasis>",
    "template": "
    <emphasis>Enter ERB Code Here</emphasis>
"
}</screen>
					<formalpara>
						<title>Example JSON File with ERB Template:</title>
						<para>
							
<screen>{
    "name": "Hosts - complete list",
    "template": "
&lt;%#
name: Hosts - complete list
snippet: false
template_inputs:
- name: host
  required: false
  input_type: user
  advanced: false
  value_type: plain
  resource_type: Katello::ActivationKey
model: ReportTemplate
-%&gt;
&lt;% load_hosts(search: input('host')).each_record do |host| -%&gt;
&lt;%
      report_row(
          'Server FQND': host.name
      )
-%&gt;
&lt;%  end -%&gt;
&lt;%= report_render %&gt;
"
}</screen>
						</para>
					</formalpara>
				</listitem>
				<listitem>
					<simpara>
						Use the following request to import the template:
					</simpara>
					
<screen>$ curl --insecure --user admin:redhat \
--data @<emphasis>Example_Template</emphasis>.json --header "Content-Type:application/json" \
--request POST --config https://<emphasis>satellite.example.com</emphasis>/api/report_templates/import</screen>
				</listitem>
				<listitem>
					<simpara>
						Use the following request to retrieve a list of report templates and validate that you can view the template in Satellite:
					</simpara>
					
<screen>$ curl --insecure --user admin:redhat \
 --request GET --config https://<emphasis>satellite.example.com</emphasis>/api/report_templates | json_reformat</screen>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="proc_creating_a_report_table_to_monitor_entitlements">
			<title>Creating a Report Template to Monitor Entitlements</title>
			<simpara>
				You can use a report template to return a list of hosts with a certain subscription and to display the number of cores for those hosts.
			</simpara>
			<simpara>
				For more information about writing templates, see <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>, and click <emphasis role="strong">Create Template</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: In the <emphasis role="strong">Editor</emphasis> field, use the <literal>&lt;%# &gt;</literal> tags to add a comment with information that might be useful for later reference. For example:
					</simpara>
					
<screen>&lt;%#
name: Entitlements
snippet: false
model: ReportTemplate
require:
- plugin: katello
  version: 3.14.0
-%&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						Add a line with the <literal>load_hosts()</literal> macro and populate the macro with the following method and variables:
					</simpara>
					
<screen>&lt;%- load_hosts(includes: [:lifecycle_environment, :operatingsystem, :architecture, :content_view, :organization, :reported_data, :subscription_facet, :pools =&gt; [:subscription]]).each_record do |host| -%&gt;</screen>
					<simpara>
						To view a list of variables you can use, click the <emphasis role="strong">Help</emphasis> tab and in the <emphasis role="strong">Safe mode methods and variables</emphasis> table, find the <emphasis role="strong">Host::Managed</emphasis> row.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add a line with the <literal>host.pools</literal> variable with the <literal>each</literal> method, for example:
					</simpara>
					
<screen>&lt;%- host.pools.each do |pool| -%&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						Add a line with the <literal>report_row()</literal> method to create a report and add the variables that you want to target as part of the report:
					</simpara>
					
<screen>&lt;%-     report_row(
          'Name': host.name,
          'Organization': host.organization,
          'Lifecycle Environment': host.lifecycle_environment,
          'Content View': host.content_view,
          'Host Collections': host.host_collections,
          'Virtual': host.virtual,
          'Guest of Host': host.hypervisor_host,
          'OS': host.operatingsystem,
          'Arch': host.architecture,
          'Sockets': host.sockets,
          'RAM': host.ram,
          'Cores': host.cores,
          'SLA': host_sla(host),
          'Products': host_products(host),
          'Subscription Name': sub_name(pool),
          'Subscription Type': pool.type,
          'Subscription Quantity': pool.quantity,
          'Subscription SKU': sub_sku(pool),
          'Subscription Contract': pool.contract_number,
          'Subscription Account': pool.account_number,
          'Subscription Start': pool.start_date,
          'Subscription End': pool.end_date,
          'Subscription Guest': registered_through(host)
          ) -%&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						Add end statements to the template:
					</simpara>
					
<screen>&lt;%-   end -%&gt;
&lt;%- end -%&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						To generate a report, you must add the &lt;%= report_render -%&gt; macro:
					</simpara>
					
<screen>&lt;%= report_render -%&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to save the template.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="con_report_templates_safe_mode">
			<title>Report Template Safe Mode</title>
			<simpara>
				When you create report templates in Satellite, safe mode is enabled by default. Safe mode limits the macros and variables that you can use in the report template. Safe mode prevents rendering problems and enforces best practices in report templates. The list of supported macros and variables is available in the Satellite web UI.
			</simpara>
			<simpara>
				To view the macros and variables that are available, in the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis> and click <emphasis role="strong">Create Template</emphasis>. In the Create Template window, click the <emphasis role="strong">Help</emphasis> tab and expand <emphasis role="strong">Safe mode methods</emphasis>.
			</simpara>
			<simpara>
				While safe mode is enabled, if you try to use a macro or variable that is not listed in <emphasis role="strong">Safe mode methods</emphasis>, the template editor displays an error message.
			</simpara>
			<simpara>
				To view the status of safe mode in Satellite, in the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> and click the <emphasis role="strong">Provisioning</emphasis> tab. Locate the <emphasis role="strong">Safemode rendering</emphasis> row to check the value.
			</simpara>
		</section>
	</chapter>
	<chapter xml:id="chap-Red_Hat_Satellite-Managing_Hosts-Configuring_Host_Collections">
		<title>Configuring Host Collections</title>
		<simpara>
			A host collection is a group of multiple content hosts. This feature enables you to perform the same action on multiple hosts at once. These actions can include the installation, removal, and update of packages and errata, change of assigned life cycle environment, and change of Content View. You can create host collections to suit your requirements, and those of your company. For example, group hosts in host collections by function, department, or business unit.
		</simpara>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Creating_a_Host_Collection">
			<title>Creating a Host Collection</title>
			<simpara>
				The following procedure shows how to create host collections.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Creating_a_Host_Collection-To_Create_a_Host_Collection">
				<title>To Create a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">New Host Collection</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add the Name of the host collection.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Clear <emphasis role="strong">Unlimited Content Hosts</emphasis>, and enter the desired maximum number of hosts in the <emphasis role="strong">Limit</emphasis> field.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add the Description of the host collection.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					To create a host collection, enter the following command:
				</para>
			</formalpara>
			
<screen># hammer host-collection create \
--organization "<emphasis>Your_Organization</emphasis>" \
--name <emphasis>hc_name</emphasis></screen>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Cloning_a_Host_Collection">
			<title>Cloning a Host Collection</title>
			<simpara>
				The following procedure shows how to clone a host collection.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Cloning_a_Host_Collection-To_Clone_a_Host_Collection">
				<title>To Clone a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the left hand panel, click the host collection you want to clone.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Copy Collection</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Specify a name for the cloned collection.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Create</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Removing_a_Host_Collection">
			<title>Removing a Host Collection</title>
			<simpara>
				The following procedure shows how to remove a host collection.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Removing_a_Host_Collection-To_Remove_a_Host_Collection">
				<title>To Remove a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Choose the host collection to be removed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Remove</emphasis>. An alert box appears:
					</simpara>
					
<screen>Are you sure you want to remove host collection <emphasis>Host Collection Name</emphasis>?</screen>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Remove</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Adding_a_Host_to_a_Host_Collection">
			<title>Adding a Host to a Host Collection</title>
			<simpara>
				The following procedure shows how to add hosts to host collections.
			</simpara>
			<simpara xml:id="form-Red_Hat_Satellite-Managing_Hosts-Adding_Hosts_to_a_Host_Collection-Task_Prerequisites">
				<emphasis role="strong">Prerequisites</emphasis>
			</simpara>
			<simpara>
				A host must be registered to Red Hat Satellite in order to add it to a Host Collection. For more information about registering hosts, <xref linkend="Registering_Hosts" />.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Adding_Hosts_to_a_Host_Collection-To_Add_Hosts_to_a_Host_Collection">
				<title>To Add Hosts to a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the host collection where the host should be added.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Hosts</emphasis> tab, select the <emphasis role="strong">Add</emphasis> subtab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the hosts to be added from the table and click <emphasis role="strong">Add Selected</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>For CLI Users</title>
				<para>
					To add hosts to a host collection, enter the following command:
				</para>
			</formalpara>
			
<screen># hammer host-collection add-host \
--id <emphasis>hc_ID</emphasis> \
--host-ids <emphasis>host_ID1</emphasis>,<emphasis>host_ID2</emphasis>...</screen>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Removing_a_Host_from_a_Host_Collection">
			<title>Removing a Host from a Host Collection</title>
			<simpara>
				The following procedure shows how to remove hosts from host collections.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Removing_a_Host_from_a_Host_Collection-To_Remove_Hosts_from_a_Host_Collection">
				<title>To Remove Hosts from a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Choose the desired host collection.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Hosts</emphasis> tab, select the <emphasis role="strong">List/Remove</emphasis> subtab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the hosts you want to remove from the host collection and click <emphasis role="strong">Remove Selected</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Configuring_Host_Collections-Adding_Content_to_a_Host_Collection">
			<title>Adding Content to a Host Collection</title>
			<simpara>
				These steps show how to add content to host collections in Red Hat Satellite.
			</simpara>
			<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Adding_Packages_to_a_Host_Collection">
				<title>Adding Packages to a Host Collection</title>
				<simpara>
					The following procedure shows how to add packages to host collections.
				</simpara>
				<simpara xml:id="form-Red_Hat_Satellite-Managing_Hosts-Adding_Packages_to_a_Host_Collection-Task_Prerequisites">
					<emphasis role="strong">Prerequisites</emphasis>
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							The content to be added should be available in one of the existing repositories or added prior to this procedure.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Content should be promoted to the environment where the hosts are assigned.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Adding_Packages_to_a_Host_Collection-To_Add_Packages_to_Host_Collections">
					<title>To Add Packages to Host Collections:</title>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the host collection where the package should be added.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Collection Actions</emphasis> tab, click <emphasis role="strong">Package Installation, Removal, and Update</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To update all packages, click the <emphasis role="strong">Update All Packages</emphasis> button to use the default method. Alternatively, select the drop-down icon to the right of the button to select a method to use. Selecting the <emphasis role="strong">via remote execution - customize first</emphasis> menu entry will take you to the <emphasis role="strong">Job invocation</emphasis> page where you can customize the action.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the <emphasis role="strong">Package</emphasis> or <emphasis role="strong">Package Group</emphasis> radio button as required.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the field provided, specify the package or package group name. Then click:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Install</emphasis> — to install a new package using the default method. Alternatively, select the drop-down icon to the right of the button and select a method to use. Selecting the <emphasis role="strong">via remote execution - customize first</emphasis> menu entry will take you to the <emphasis role="strong">Job invocation</emphasis> page where you can customize the action.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Update</emphasis> — to update an existing package in the host collection using the default method. Alternatively, select the drop-down icon to the right of the button and select a method to use. Selecting the <emphasis role="strong">via remote execution - customize first</emphasis> menu entry will take you to the <emphasis role="strong">Job invocation</emphasis> page where you can customize the action.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Adding_Errata_to_a_Host_Collection">
				<title>Adding Errata to a Host Collection</title>
				<simpara>
					The following procedure shows how to add errata to host collections.
				</simpara>
				<simpara xml:id="form-Red_Hat_Satellite-Managing_Hosts-Adding_Errata_to_a_Host_Collection-Prerequisites">
					<emphasis role="strong">Prerequisites</emphasis>
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							The errata to be added should be available in one of the existing repositories or added prior to this procedure.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Errata should be promoted to the environment where the hosts are assigned.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Adding_Errata_to_a_Host_Collection-To_Add_Errata_to_a_Host_Collection">
					<title>To Add Errata to a Host Collection:</title>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the host collection where the errata should be added.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Collection Actions</emphasis> tab, click <emphasis role="strong">Errata Installation</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the errata you want to add to the host collection and click the <emphasis role="strong">Install Selected</emphasis> button to use the default method. Alternatively, select the drop-down icon to the right of the button to select a method to use. Selecting the <emphasis role="strong">via remote execution - customize first</emphasis> menu entry will take you to the <emphasis role="strong">Job invocation</emphasis> page where you can customize the action.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Removing_Content_from_a_Host_Collection">
			<title>Removing Content from a Host Collection</title>
			<simpara>
				The following procedure shows how to remove packages from host collections.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Removing_Content_from_a_Host_Collection-To_Remove_Content_from_a_Host_Collection">
				<title>To Remove Content from a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collections</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the host collection where the package should be removed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Collection Actions</emphasis> tab, click <emphasis role="strong">Package Installation, Removal, and Update</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Package</emphasis> or <emphasis role="strong">Package Group</emphasis> radio button as required.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the field provided, specify the package or package group name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Remove</emphasis> button to remove the package or package group using the default method. Alternatively, select the drop-down icon to the right of the button and select a method to use. Selecting the <emphasis role="strong">via remote execution - customize first</emphasis> menu entry will take you to the <emphasis role="strong">Job invocation</emphasis> page where you can customize the action.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Changing_the_Life_Cycle_Environment_or_Content_View_of_a_Host_Collection">
			<title>Changing the Life Cycle Environment or Content View of a Host Collection</title>
			<simpara>
				The following procedure shows how to change the assigned life cycle environment or Content View of host collections.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Changing_the_Life_Cycle_Environment_or_Content_View_of_a_Host_Collection-To_Change_the_Life_Cycle_Environment_or_Content_View_of_a_Host_Collection">
				<title>To Change the Life Cycle Environment or Content View of a Host Collection:</title>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Host Collection</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Selection the host collection where the life cycle environment or Content View should be changed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Collection Actions</emphasis> tab, click <emphasis role="strong">Change assigned Life Cycle Environment or Content View</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the life cycle environment to be assigned to the host collection.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the required Content View from the list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Assign</emphasis>.
					</simpara>
					<note>
						<simpara>
							The changes take effect in approximately 4 hours. To make the changes take effect immediately, on the host, enter the following command:
						</simpara>
						
<screen># subscription-manager refresh</screen>
						<simpara>
							You can use remote execution to run this command on multiple hosts at the same time.
						</simpara>
					</note>
				</listitem>
			</orderedlist>
		</section>
	</chapter>
	<chapter xml:id="Using_Ansible_Roles">
		<title>Using Ansible Roles</title>
		<section xml:id="assigning-ansible-roles-to-an-existing-host">
			<title>Assigning Ansible Roles to an Existing Host</title>
			<simpara>
				You can use Ansible roles for remote management of Red Hat Enterprise Linux versions 8, 7, and 6.9 or later.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					You must import the roles to Satellite before you can assign them to a host. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/administering_red_hat_satellite/chap-red_hat_satellite-administering_red_hat_satellite-managing_ansible_roles#sect-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Adding_RHEL_System_Roles">Adding Red Hat Enterprise Linux System Roles</link> in <emphasis>Administering Red Hat Satellite</emphasis>.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the host you want to assign an Ansible role to, click <emphasis role="strong">Edit</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Ansible Roles</emphasis> tab, and in the <emphasis role="strong">All items</emphasis> list, search for the roles that you want to add.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the roles that you want to add, and click the arrow icon to move the roles to the <emphasis role="strong">Selected items</emphasis> list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				After you assign Ansible roles to hosts, you can use Ansible for remote execution. For more information, see <xref linkend="sect-Managing_Hosts-Establishing_a_Secure_Connection_for_Remote_Commands" />.
			</simpara>
			<formalpara>
				<title>Overiding Parameter Variables</title>
				<para>
					On the <emphasis role="strong">Parameters</emphasis> tab, click <emphasis role="strong">Add Parameter</emphasis> to add any parameter variables that you want to pass to job templates at run time. This includes all Ansible playbook parameters and host parameters that you want to associate with the host. To use a parameter variable with an Ansible job template, you must add a <emphasis role="strong">Host Parameter</emphasis>.
				</para>
			</formalpara>
		</section>
		<section xml:id="running-ansible-roles-on-a-host">
			<title>Running Ansible Roles on a Host</title>
			<simpara>
				You can run Ansible roles on a host through the Satellite web UI.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You must have imported the Ansible roles to Satellite.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You must have assigned the Ansible roles to the host.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the check box of the host that contains the Ansible role you want to run.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Play Ansible roles</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				You can view the status of your Ansible job on the <emphasis role="strong">Run Ansible roles</emphasis> page. To rerun a job, click the <emphasis role="strong">Rerun</emphasis> button.
			</simpara>
		</section>
		<section xml:id="assigning-an-ansible-role-to-a-host-group">
			<title>Assigning an Ansible Role to a Host Group</title>
			<simpara>
				You can use Ansible roles for remote management of Red Hat Enterprise Linux versions 8, 7, and 6.9 or later.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					You must import the roles to Satellite before you can assign them to a host group. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/administering_red_hat_satellite/chap-red_hat_satellite-administering_red_hat_satellite-managing_ansible_roles#sect-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Adding_RHEL_System_Roles">Adding Red Hat Enterprise Linux System Roles</link> in <emphasis>Administering Red Hat Satellite</emphasis>.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Configure</emphasis> &gt; <emphasis role="strong">Host Groups</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the list of host groups, click the host group name that you want to add an Ansible Role to.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Ansible Roles</emphasis> tab, and in the <emphasis role="strong">All items</emphasis> list, search for the roles that you want to add.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the roles that you want to add, and click the arrow icon to move the roles to the <emphasis role="strong">Selected items</emphasis> list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="running-ansible-roles-on-a-host-group">
			<title>Running Ansible Roles on a Host Group</title>
			<simpara>
				You can run Ansible roles on a host group through the Satellite web UI.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You must have imported the Ansible roles to Satellite.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You must have assigned the Ansible roles to the host group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You must have at least one host in your host group.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Satellite web UI, navigate to <emphasis role="strong">Configure</emphasis> &gt; <emphasis role="strong">Host Groups</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From the list in the <emphasis role="strong">Actions</emphasis> column for the host group, select <emphasis role="strong">Run all Ansible roles</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				You can view the status of your Ansible job on the <emphasis role="strong">Run Ansible roles</emphasis> page. To rerun a job, click the <emphasis role="strong">Rerun</emphasis> button.
			</simpara>
		</section>
	</chapter>
	<chapter xml:id="Running_Jobs_on_Hosts">
		<title>Running Jobs on Hosts</title>
		<simpara>
			You can run jobs on hosts remotely from Capsules using shell scripts or Ansible tasks and playbooks. This is referred to as remote execution.
		</simpara>
		<simpara>
			For custom Ansible roles that you create, or roles that you download, you must install the package containing the roles on the Capsule base operating system. Before you can use Ansible roles, you must import the roles into Satellite from the Capsule where they are installed.
		</simpara>
		<simpara>
			Communication occurs through Capsule Server, which means that Satellite Server does not require direct access to the target host, and can scale to manage many hosts. Remote execution uses the SSH service that must be enabled and running on the target host. Ensure that the remote execution Capsule has access to port 22 on the target hosts.
		</simpara>
		<simpara>
			Satellite uses ERB syntax job templates. For more information, see <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
		</simpara>
		<simpara>
			Several job templates for shell scripts and Ansible are included by default. For more information, see <xref linkend="sect-Managing_Hosts-Setting_up_Job_Templates" />.
		</simpara>
		<simpara>
			By default, Satellite Server is configured to use the Katello Agent rather than remote execution. To change this setting, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis>, click <emphasis role="strong">Content</emphasis>, and change the <emphasis role="strong">Use remote execution by default</emphasis> setting.
		</simpara>
		<note>
			<simpara>
				Any Capsule Server base operating system is a client of Satellite Server’s internal Capsule, and therefore this section applies to any type of host connected to Satellite Server, including Capsule Servers.
			</simpara>
		</note>
		<simpara>
			You can run jobs on multiple hosts at once, and you can use variables in your commands for more granular control over the jobs you run. You can use host facts, smart class parameters, smart variables, and host parameters to populate variable values. For more information about Ansible variables, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.6/html/administering_red_hat_satellite/chap-red_hat_satellite-administering_red_hat_satellite-managing_ansible_roles#sect-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Managing_Ansible_Variables_with_Satellite">Overriding Ansible Variables in Satellite</link>. In addition, you can specify custom values for templates when you run the command. For more information, see <xref linkend="sect-Managing_Hosts-Executing_Remote_Jobs" />.
		</simpara>
		<section xml:id="sect-Managing_Hosts-Choosing_a_Satellite_Capsule_for_Remote_Execution">
			<title>How Satellite Selects Capsule for Remote Execution</title>
			<simpara>
				When you run a remote job on hosts, for every host, Satellite performs the following actions to find a remote execution Capsule to use. Satellite searches only for Capsules that have the remote execution feature enabled.
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Satellite finds the host’s interfaces that have the <emphasis role="strong">Remote execution</emphasis> check box selected.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Satellite finds the subnets of these interfaces.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Satellite finds remote execution Capsules assigned to these subnets.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						From this set of Capsules, Satellite selects the Capsule that has the least number of running jobs. By doing this, Satellite ensures that the jobs load is balanced between remote execution Capsules.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						If Satellite does not find a remote execution Capsule at this stage, and if the <emphasis role="strong">Fallback to Any Capsule</emphasis> setting is enabled, Satellite adds another set of Capsules to select the remote execution Capsule from. Satellite selects the most lightly loaded Capsule from the following types of Capsules that are assigned to the host:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								DHCP, DNS and TFTP Capsules assigned to the host’s subnets
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								DNS Capsule assigned to the host’s domain
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Realm Capsule assigned to the host’s realm
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Puppet Master Capsule
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Puppet CA Capsule
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								OpenSCAP Capsule
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						If Satellite does not find a remote execution Capsule at this stage, and if the <emphasis role="strong">Enable Global Capsule</emphasis> setting is enabled, Satellite selects the most lightly loaded remote execution Capsule from the set of all Capsules in the host’s organization and location to execute a remote job.
					</simpara>
				</listitem>
			</orderedlist>
			<section remap="_configuring_the_fallback_to_any_capsule_remote_execution_setting_in_satellite" xml:id="configuring_the_fallback_to_any_capsule_remote_execution_setting_in_satellite">
				<title>Configuring the Fallback to Any Capsule Remote Execution Setting in Satellite</title>
				<simpara>
					You can enable the <emphasis role="strong">Fallback to Any Capsule</emphasis> setting to configure Satellite to search for remote execution Capsules from the list of Capsules that are assigned to hosts. This can be useful if you need to run remote jobs on hosts that have no subnets configured or if the hosts' subnets are assigned to Capsules that do not have the remote execution feature enabled.
				</simpara>
				<simpara>
					If the <emphasis role="strong">Fallback to Any Capsule</emphasis> setting is enabled, Satellite adds another set of Capsules to select the remote execution Capsule from. Satellite also selects the most lightly loaded Capsule from the set of all Capsules assigned to the host, such as the following:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							DHCP, DNS and TFTP Capsules assigned to the host’s subnets
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							DNS Capsule assigned to the host’s domain
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Realm Capsule assigned to the host’s realm
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Puppet Master Capsule
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Puppet CA Capsule
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							OpenSCAP Capsule
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">RemoteExecution</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Configure the <emphasis role="strong">Fallback to Any Capsule</emphasis> setting.
						</simpara>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>For CLI Users</title>
					<para>
						Enter the <literal>hammer settings set</literal> command on Satellite to configure the <emphasis role="strong">Fallback to Any Capsule</emphasis> setting. For example, to set the value to <literal>true</literal>, enter the following command:
					</para>
				</formalpara>
				
<screen># hammer settings set --name=remote_execution_fallback_proxy --value=true</screen>
			</section>
			<section remap="_configuring_the_global_capsule_remote_execution_setting_in_satellite" xml:id="configuring_the_global_capsule_remote_execution_setting_in_satellite">
				<title>Configuring the Global Capsule Remote Execution Setting in Satellite</title>
				<simpara>
					By default, Satellite searches for remote execution Capsules in hosts' organizations and locations regardless of whether Capsules are assigned to hosts' subnets or not. You can disable the <emphasis role="strong">Enable Global Capsule</emphasis> setting if you want to limit the search to the Capsules that are assigned to hosts' subnets.
				</simpara>
				<simpara>
					If the <emphasis role="strong">Enable Global Capsule</emphasis> setting is enabled, Satellite adds another set of Capsules to select the remote execution Capsule from. Satellite also selects the most lightly loaded remote execution Capsule from the set of all Capsules in the host’s organization and location to execute a remote job.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">RemoteExection</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Configure the <emphasis role="strong">Enable Global Capsule</emphasis> setting.
						</simpara>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>For CLI Users</title>
					<para>
						Enter the <literal>hammer settings set</literal> command on Satellite to configure the <literal>Enable Global Capsule</literal> setting. For example, to set the value to <literal>true</literal>, enter the following command:
					</para>
				</formalpara>
				
<screen># hammer settings set --name=remote_execution_global_proxy --value=true</screen>
			</section>
		</section>
		<section remap="_configuring_satellite_to_use_an_alternative_directory_to_execute_remote_jobs_on_clients" xml:id="configuring_satellite_to_use_an_alternative_directory_to_execute_remote_jobs_on_clients">
			<title>Configuring Satellite to Use an Alternative Directory to Execute Remote Jobs on Clients</title>
			<simpara>
				By default, Satellite uses the <literal>/var/tmp</literal> directory on the client system to execute the remote execution jobs. If the client system has <literal>noexec</literal> set for the <literal>/var/</literal> volume or file system, you must configure Satellite to use an alternative directory because otherwise the remote execution job fails since the script cannot be run.
			</simpara>
			<formalpara>
				<title>Procedure</title>
				<para>
					Optional: To use an alternative directory, complete this procedure.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Create a new directory, for example <emphasis>new_place</emphasis>:
					</simpara>
					
<screen># mkdir /<emphasis>remote_working_dir</emphasis></screen>
				</listitem>
				<listitem>
					<simpara>
						Copy the SELinux context from the default <literal>var</literal> directory:
					</simpara>
					
<screen># chcon --reference=/var <emphasis>/remote_working_dir</emphasis></screen>
				</listitem>
				<listitem>
					<simpara>
						Edit the <literal>remote_working_dir</literal> setting in the <literal>/etc/foreman-proxy/settings.d/remote_execution_ssh.yml</literal> file to point to the required directory, for example:
					</simpara>
					
<screen>:remote_working_dir: <emphasis>/remote_working_dir</emphasis></screen>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Managing_Hosts-Establishing_a_Secure_Connection_for_Remote_Commands">
			<title>Distributing SSH Keys for Remote Execution</title>
			<simpara>
				To use SSH keys for authenticating remote execution connections, you must distribute the public SSH key from Capsule to its attached hosts that you want to manage. Ensure that the SSH service is enabled and running on the hosts. Configure any network or host-based firewalls to enable access to port 22.
			</simpara>
			<simpara>
				Use one of the following methods to distribute the public SSH key from Capsule to target hosts:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						<xref linkend="sect-Managing_Hosts-Distributing_SSH_Keys_for_Remote_Execution_Manually" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<xref linkend="sect-Managing_Hosts-Using_API_to_Obtain_SSH_Keys_for_Remote_Execution" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<xref linkend="sect-Managing_Hosts-Configuring_a_Kickstart_Template_to_Distribute_SSH_Keys_during_Provisioning" />.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				Satellite distributes SSH keys for the remote execution feature to the hosts provisioned from Satellite by default.
			</simpara>
			<section xml:id="sect-Managing_Hosts-Distributing_SSH_Keys_for_Remote_Execution_Manually">
				<title>Distributing SSH Keys for Remote Execution Manually</title>
				<simpara>
					To distribute SSH keys manually, complete the following steps:
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter the following command on Capsule. Repeat for each target host you want to manage:
						</simpara>
						
<screen># ssh-copy-id -i ~foreman-proxy/.ssh/id_rsa_foreman_proxy.pub <emphasis>root@target.example.com</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							To confirm that the key was successfully copied to the target host, enter the following command on Capsule:
						</simpara>
						
<screen># ssh -i ~foreman-proxy/.ssh/id_rsa_foreman_proxy <emphasis>root@target.example.com</emphasis></screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="sect-Managing_Hosts-Using_API_to_Obtain_SSH_Keys_for_Remote_Execution">
				<title>Using the Satellite API to Obtain SSH Keys for Remote Execution</title>
				<simpara>
					To use the Satellite API to download the public key from Capsule, complete this procedure on each target host.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							On the target host, create the <literal><subscript>/.ssh</subscript></literal> directory to store the SSH key:
						</simpara>
						
<screen># mkdir ~/.ssh</screen>
					</listitem>
					<listitem>
						<simpara>
							Download the SSH key from Capsule:
						</simpara>
						
<screen># curl https://<emphasis>capsule.example.com</emphasis>:9090/ssh/pubkey &gt;&gt; ~/.ssh/authorized_keys</screen>
					</listitem>
					<listitem>
						<simpara>
							Configure permissions for the <literal>~/.ssh</literal> directory:
						</simpara>
						
<screen># chmod 700 ~/.ssh</screen>
					</listitem>
					<listitem>
						<simpara>
							Configure permissions for the <literal>authorized_keys</literal> file:
						</simpara>
						
<screen># chmod 600 ~/.ssh/authorized_keys</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="sect-Managing_Hosts-Configuring_a_Kickstart_Template_to_Distribute_SSH_Keys_during_Provisioning">
				<title>Configuring a Kickstart Template to Distribute SSH Keys during Provisioning</title>
				<simpara>
					You can add a <literal>remote_execution_ssh_keys</literal> snippet to your custom kickstart template to deploy SSH Keys to hosts during provisioning. Kickstart templates that Satellite ships include this snippet by default. Therefore, Satellite copies the SSH key for remote execution to the systems during provisioning.
				</simpara>
				<itemizedlist>
					<title>Procedure</title>
					<listitem>
						<simpara>
							To include the public key in newly-provisioned hosts, add the following snippet to the Kickstart template that you use:
						</simpara>
						
<screen>&lt;%= snippet 'remote_execution_ssh_keys' %&gt;</screen>
					</listitem>
				</itemizedlist>
			</section>
		</section>
		<section remap="_configuring_a_keytab_for_kerberos_ticket_granting_tickets" xml:id="configuring_a_keytab_for_kerberos_ticket_granting_tickets">
			<title>Configuring a keytab for Kerberos Ticket Granting Tickets</title>
			<simpara>
				Use this procedure to configure Satellite to use a keytab to obtain Kerberos ticket granting tickets. If you do not set up a keytab, you must manually retrieve tickets.
			</simpara>
			<formalpara>
				<title>Procedure</title>
				<para>
					To ensure that the <literal>foreman-proxy</literal> user on Satellite can obtain Kerberos ticket granting tickets, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Find the ID of the <literal>foreman-proxy</literal> user:
					</simpara>
					
<screen># id -u foreman-proxy</screen>
				</listitem>
				<listitem>
					<simpara>
						Modify the <literal>umask</literal> value so that new files have the permissions <literal>600</literal>:
					</simpara>
					
<screen># umask 077</screen>
				</listitem>
				<listitem>
					<simpara>
						Create the directory for the keytab:
					</simpara>
					
<screen># mkdir -p "/var/kerberos/krb5/user/<emphasis>USER_ID</emphasis>"</screen>
				</listitem>
				<listitem>
					<simpara>
						Create a keytab or copy an existing keytab to the directory:
					</simpara>
					
<screen># cp <emphasis>your_client.keytab</emphasis> /var/kerberos/krb5/user/<emphasis>USER_ID</emphasis>/client.keytab</screen>
				</listitem>
				<listitem>
					<simpara>
						Change the directory owner to the <literal>foreman-proxy</literal> user:
					</simpara>
					
<screen># chown -R foreman-proxy:foreman-proxy "/var/kerberos/krb5/user/<emphasis>USER_ID</emphasis>"</screen>
				</listitem>
				<listitem>
					<simpara>
						Ensure that the keytab file is read-only:
					</simpara>
					
<screen># chmod -wx "/var/kerberos/krb5/user/<emphasis>USER_ID</emphasis>/client.keytab"</screen>
				</listitem>
				<listitem>
					<simpara>
						Restore the SELinux context:
					</simpara>
					
<screen># restorecon -RvF /var/kerberos/krb5</screen>
				</listitem>
			</orderedlist>
		</section>
		<section remap="_configuring_kerberos_authentication_for_remote_execution" xml:id="configuring_kerberos_authentication_for_remote_execution">
			<title>Configuring Kerberos Authentication for Remote Execution</title>
			<simpara>
				From Satellite 6.7, you can use Kerberos authentication to establish an SSH connection for remote execution on Satellite hosts.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					Before you can use Kerberos authentication for remote execution on Red Hat Satellite, you must set up a Kerberos server for identity management and ensure that you complete the following prerequisites:
				</para>
			</formalpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Enroll Satellite Server on the Kerberos server
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enroll the Satellite target host on the Kerberos server
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Configure and initialize a Kerberos user account for remote execution
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Ensure that the foreman-proxy user on Satellite has a valid Kerberos ticket granting ticket
					</simpara>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>Procedure</title>
				<para>
					To set up Satellite to use Kerberos authentication for remote execution on hosts, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						To install the <literal>tfm-rubygem-net-ssh-krb</literal> package, enter the following command:
					</simpara>
					
<screen># yum install tfm-rubygem-net-ssh-krb</screen>
				</listitem>
				<listitem>
					<simpara>
						To install and enable Kerberos authentication for remote execution, enter the following command:
					</simpara>
					
<screen># satellite-installer --scenario satellite \
 --foreman-proxy-plugin-remote-execution-ssh-ssh-kerberos-auth true</screen>
				</listitem>
				<listitem>
					<simpara>
						To edit the default user for remote execution, in the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> and click the <emphasis role="strong">RemoteExecution</emphasis> tab. In the <emphasis role="strong">remote_execution_ssh_user</emphasis> row, edit the second column and add the user name for the Kerberos account.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Navigate to <emphasis role="strong">remote_execution_effective_user</emphasis> and edit the second column to add the user name for the Kerberos account.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				To confirm that Kerberos authentication is ready to use, run a remote job on the host.
			</simpara>
		</section>
		<section xml:id="sect-Managing_Hosts-Configuring_and_Running_Remote_Commands">
			<title>Configuring and Running Remote Jobs</title>
			<simpara>
				Any command that you want to apply to a remote host must be defined as a job template. After you have defined a job template you can execute it multiple times.
			</simpara>
			<section xml:id="sect-Managing_Hosts-Setting_up_Job_Templates">
				<title>Setting up Job Templates</title>
				<simpara>
					Satellite provides default job templates that you can use for executing jobs. To view the list of job templates, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job templates</emphasis>. If want to use a template without making changes, proceed to <xref linkend="sect-Managing_Hosts-Executing_Remote_Jobs" />.
				</simpara>
				<simpara>
					You can use default templates as a base for developing your own. Default job templates are locked for editing. Clone the template and edit the clone.
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							To clone a template, in the <emphasis role="strong">Actions</emphasis> column, select <emphasis role="strong">Clone</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a unique name for the clone and click <emphasis role="strong">Submit</emphasis> to save the changes.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					Job templates use the Embedded Ruby (ERB) syntax. For more information about writing templates, see the <xref linkend="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference" />.
				</simpara>
				<formalpara>
					<title>Ansible Considerations</title>
					<para>
						To create an Ansible job template, use the following procedure and instead of ERB syntax, use YAML syntax. Begin the template with <literal>---</literal> and to the first line, you must add <literal>- hosts: all</literal>. You can embed an Ansible playbook YAML file into the job template body. You can also add ERB syntax to customize your YAML Ansible template. You can also import Ansible playbooks in Satellite. For more information, see <xref linkend="Synchronizing_Templates_Repositories" />.
					</para>
				</formalpara>
				<formalpara>
					<title>Parameter Variables</title>
					<para>
						At run time, job templates can accept parameter variables that you define for a host. Note that only the parameters visible on the <emphasis role="strong">Parameters</emphasis> tab at the host’s edit page can be used as input parameters for job templates. If you do not want your Ansible job template to accept parameter variables at run time, in the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> and click the <emphasis role="strong">Ansible</emphasis> tab. In the <emphasis role="strong">Top level Ansible variables</emphasis> row, change the <emphasis role="strong">Value</emphasis> parameter to <emphasis role="strong">No</emphasis>.
					</para>
				</formalpara>
				<orderedlist numeration="arabic" xml:id="proc-Managing_Hosts-Creating_a_Job_Template">
					<title>To Create a Job Template:</title>
					<listitem>
						<simpara>
							Navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job templates</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Job Template</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Template</emphasis> tab, and in the <emphasis role="strong">Name</emphasis> field, enter a unique name for your job template.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Default</emphasis> to make the template available for all organizations and locations.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create the template directly in the template editor or upload it from a text file by clicking <emphasis role="strong">Import</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: In the <emphasis role="strong">Audit Comment</emphasis> field, add information about the change.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Job</emphasis> tab, and in the <emphasis role="strong">Job category</emphasis> field, enter your own category or select from the default categories listed in <xref linkend="tabl-Managing_Hosts-Default_Job_Template_Categories" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: In the <emphasis role="strong">Description Format</emphasis> field, enter a description template. For example, <literal>Install package %{package_name}</literal>. You can also use <literal>%{template_name}</literal> and <literal>%{job_category}</literal> in your template.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Provider Type</emphasis> list, select <emphasis role="strong">SSH</emphasis> for shell scripts and <emphasis role="strong">Ansible</emphasis> for Ansible tasks or playbooks.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: In the <emphasis role="strong">Timeout to kill</emphasis> field, enter a timeout value to terminate the job if it does not complete.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: Click <emphasis role="strong">Add Input</emphasis> to define an input parameter. Parameters are requested when executing the job and do not have to be defined in the template. For examples, see the <emphasis role="strong">Help</emphasis> tab.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: Click <emphasis role="strong">Foreign input set</emphasis> to include other templates in this job.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: In the <emphasis role="strong">Effective user</emphasis> area, configure a user if the command cannot use the default <literal>remote_execution_effective_user</literal> setting.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: If this template is a snippet to be included in other templates, click the <emphasis role="strong">Type</emphasis> tab and select <emphasis role="strong">Snippet</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Location</emphasis> tab and add the locations where you want to use the template.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Organizations</emphasis> tab and add the organizations where you want to use the template.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis> to save your changes.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					You can create advanced templates by including other templates in the template syntax, see <xref linkend="sect-Managing_Hosts-Creating_Advanced_Templates" /> for more information.
				</simpara>
				<simpara>
					An advanced template is required, for example, for executing jobs that perform power actions; see <xref linkend="exam-Managing_Hosts-Including_Power_Actions_in_Templates" /> for information on how to include the <emphasis role="strong">Power Action - SSH Default</emphasis> template in a custom template.
				</simpara>
				<formalpara>
					<title>For CLI Users</title>
					<para>
						To create a job template using a template-definition file, enter the following command:
					</para>
				</formalpara>
				
<screen># hammer job-template create \
--file "<emphasis>path_to_template_file</emphasis>" \
--name "<emphasis>template_name</emphasis>" \
--provider-type SSH \
--job-category "<emphasis>category_name</emphasis>"</screen>
				<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Managing_Hosts-Default_Job_Template_Categories">
					<title>Default Job Template Categories</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="50*"></colspec>
						<colspec colname="col_2" colwidth="50*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Job template category</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Packages
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for performing package related actions. Install, update, and remove actions are included by default.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Puppet
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for executing Puppet runs on target hosts.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Power
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for performing power related actions. Restart and shutdown actions are included by default.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Commands
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for executing custom commands on remote hosts.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Services
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for performing service related actions. Start, stop, restart, and status actions are included by default.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Katello
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Templates for performing content related actions. These templates are used mainly from different parts of the Satellite web UI (for example bulk actions UI for content hosts), but can be used separately to perform operations such as errata installation.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<example xml:id="exam-Managing_Hosts-Creating_a_restorecon_Template">
					<title>Creating a restorecon Template</title>
					<simpara>
						This example shows how to create a template called <emphasis role="strong">Run Command - restorecon</emphasis> that restores the default <emphasis role="strong">SELinux</emphasis> context for all files in the selected directory on target hosts.
					</simpara>
					<orderedlist numeration="arabic">
						<listitem>
							<simpara>
								Navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job templates</emphasis>. Click <emphasis role="strong">New Job Template</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter <emphasis role="strong">Run Command - restorecon</emphasis> in the <emphasis role="strong">Name</emphasis> field. Select <emphasis role="strong">Default</emphasis> to make the template available to all organizations. Add the following text to the template editor:
							</simpara>
							
<programlisting language="Ruby" linenumbering="unnumbered">restorecon -RvF &lt;%= input("directory") %&gt;</programlisting>
							<simpara>
								The <literal>&lt;%= input("directory") %&gt;</literal> string is be replaced by a user-defined directory during job invocation.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								On the <emphasis role="strong">Job</emphasis> tab, set <emphasis role="strong">Job category</emphasis> to <literal>Commands</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Add Input</emphasis> to allow job customization. Enter <literal>directory</literal> to the <emphasis role="strong">Name</emphasis> field. The input name must match the value specified in the template editor.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Required</emphasis> so that the command cannot be executed without the user specified parameter.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select <emphasis role="strong">User input</emphasis> from the <emphasis role="strong">Input type</emphasis> list. Enter a description to be shown during job invocation, for example <literal>Target directory for restorecon</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Submit</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						See <xref linkend="exam-Managing_Hosts-Executing_a_restorecon_Template_on_Multiple_Hosts" /> for information on how to execute a job based on this template.
					</simpara>
				</example>
			</section>
			<section xml:id="sect-Managing_Hosts-Executing_Remote_Jobs">
				<title>Executing Jobs</title>
				<simpara>
					You can execute a job that is based on a job template against one or more hosts.
				</simpara>
				<orderedlist numeration="arabic" xml:id="proc-Managing_Hosts-Executing_a_Remote_Job">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All Hosts</emphasis> and select the target hosts on which you want to execute a remote job. You can use the search field to filter the host list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select Action</emphasis> list, select <emphasis role="strong">Schedule Remote Job</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Job invocation</emphasis> page, define the main job settings:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Select the <emphasis role="strong">Job category</emphasis> and the <emphasis role="strong">Job template</emphasis> you want to use.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Optional: Select a stored search string in the <emphasis role="strong">Bookmark</emphasis> list to specify the target hosts.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Optional: Further limit the targeted hosts by entering a <emphasis role="strong">Search query</emphasis>. The <emphasis role="strong">Resolves to</emphasis> line displays the number of hosts affected by your query. Use the refresh button to recalculate the number after changing the query. The preview icon lists the targeted hosts.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The remaining settings depend on the selected job template. See <xref linkend="proc-Managing_Hosts-Creating_a_Job_Template" /> for information on adding custom parameters to a template.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Optional: To configure advanced settings for the job, click <emphasis role="strong">Display advanced fields</emphasis>. Some of the advanced settings depend on the job template, the following settings are general:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Effective user</emphasis> defines the user for executing the job, by default it is the SSH user.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Concurrency level</emphasis> defines the maximum number of jobs executed at once, which can prevent overload of systems' resources in a case of executing the job on a large number of hosts.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Timeout to kill</emphasis> defines time interval in seconds after which the job should be killed, if it is not finished already. A task which could not be started during the defined interval, for example, if the previous task took too long to finish, is canceled.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Type of query</emphasis> defines when the search query is evaluated. This helps to keep the query up to date for scheduled tasks.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Execution ordering</emphasis> determines the order in which the job is executed on hosts: alphabetical or randomized.
								</simpara>
								<simpara>
									<emphasis role="strong">Concurrency level</emphasis> and <emphasis role="strong">Timeout to kill</emphasis> settings enable you to tailor job execution to fit your infrastructure hardware and needs.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							To run the job immediately, ensure that <emphasis role="strong">Schedule</emphasis> is set to <emphasis role="strong">Execute now</emphasis>. You can also define a one-time future job, or set up a recurring job. For recurring tasks, you can define start and end dates, number and frequency of runs. You can also use cron syntax to define repetition. For more information about cron, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-automating_system_tasks">Automating System Tasks</link> section of the Red Hat Enterprise Linux 7 <emphasis>System Administrator’s Guide</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis>. This displays the <emphasis role="strong">Job Overview</emphasis> page, and when the job completes, also displays the status of the job.
						</simpara>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>For CLI Users</title>
					<para>
						Enter the following command on Satellite:
					</para>
				</formalpara>
				<simpara>
					+
				</simpara>
				
<screen># hammer settings set --name=remote_execution_global_proxy --value=false</screen>
				<simpara>
					To execute a remote job with custom parameters, complete the following steps:
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Find the ID of the job template you want to use:
						</simpara>
						
<screen># hammer job-template list</screen>
					</listitem>
					<listitem>
						<simpara>
							Show the template details to see parameters required by your template:
						</simpara>
						
<screen># hammer job-template info --id <emphasis>template_ID</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							Execute a remote job with custom parameters:
						</simpara>
						
<screen># hammer job-invocation create \
--job-template "<emphasis>template_name</emphasis>" \
--inputs <emphasis>key1</emphasis>="<emphasis>value</emphasis>",<emphasis>key2</emphasis>="<emphasis>value</emphasis>",... \
--search-query "<emphasis>query</emphasis>"</screen>
						<simpara>
							Replace <emphasis>query</emphasis> with the filter expression that defines hosts, for example <literal>"name ~ rex01"</literal>. For more information about executing remote commands with hammer, enter <literal>hammer job-template --help</literal> and <literal>hammer job-invocation --help</literal>.
						</simpara>
					</listitem>
				</orderedlist>
				<example xml:id="exam-Managing_Hosts-Executing_a_restorecon_Template_on_Multiple_Hosts">
					<title>Executing a restorecon Template on Multiple Hosts</title>
					<simpara>
						This example shows how to run a job based on the template created in <xref linkend="exam-Managing_Hosts-Creating_a_restorecon_Template" /> on multiple hosts. The job restores the SELinux context in all files under the <emphasis role="strong">/home/</emphasis> directory.
					</simpara>
					<orderedlist numeration="arabic">
						<listitem>
							<simpara>
								Navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis> and select target hosts. Select <emphasis role="strong">Schedule Remote Job</emphasis> from the <emphasis role="strong">Select Action</emphasis> list.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Job invocation</emphasis> page, select the <literal>Commands</literal> job category and the <literal>Run Command - restorecon</literal> job template.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Type <literal>/home</literal> in the <emphasis role="strong">directory</emphasis> field.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Set <emphasis role="strong">Schedule</emphasis> to <literal>Execute now</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Submit</emphasis>. You are taken to the <emphasis role="strong">Job invocation</emphasis> page where you can monitor the status of job execution.
							</simpara>
						</listitem>
					</orderedlist>
				</example>
			</section>
			<section xml:id="sect-Managing_Hosts-Monitoring_Remote_Jobs">
				<title>Monitoring Jobs</title>
				<simpara>
					You can monitor the progress of the job while it is running. This can help in any troubleshooting that may be required.
				</simpara>
				<simpara>
					Ansible jobs run on batches of 100 hosts, so you cannot cancel a job running on a specific host. A job completes only after the Ansible playbook runs on all hosts in the batch.
				</simpara>
				<orderedlist numeration="arabic" xml:id="proc-Managing_Hosts-Monitoring_a_Remote_Job">
					<title>To Monitor a Job:</title>
					<listitem>
						<simpara>
							Navigate to the Job page. This page is automatically displayed if you triggered the job with the <literal>Execute now</literal> setting. To monitor scheduled jobs, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Jobs</emphasis> and select the job run you wish to inspect.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the Job page, click the <emphasis role="strong">Hosts</emphasis> tab. This displays the list of hosts on which the job is running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Host</emphasis> column, click the name of the host that you want to inspect. This displays the <emphasis role="strong">Detail of Commands</emphasis> page where you can monitor the job execution in real time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Back to Job</emphasis> at any time to return to the <emphasis role="strong">Job Details</emphasis> page.
						</simpara>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>For CLI Users</title>
					<para>
						To monitor the progress of a job while it is running, complete the following steps:
					</para>
				</formalpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Find the ID of a job:
						</simpara>
						
<screen># hammer job-invocation list</screen>
					</listitem>
					<listitem>
						<simpara>
							Monitor the job output:
						</simpara>
						
<screen># hammer job-invocation output \
--id <emphasis>job_ID</emphasis> \
--host <emphasis>host_name</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							Optional: to cancel a job, enter the following command:
						</simpara>
						
<screen># hammer job-invocation cancel \
--id <emphasis>job_ID</emphasis></screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="sect-Managing_Hosts-Creating_Advanced_Templates">
				<title>Creating Advanced Templates</title>
				<simpara>
					When creating a job template, you can include an existing template in the template editor field. This way you can combine templates, or create more specific templates from the general ones.
				</simpara>
				<simpara>
					The following template combines default templates to install and start the <emphasis role="strong">httpd</emphasis> service on Red Hat Enterprise Linux systems:
				</simpara>
				
<programlisting language="Ruby" linenumbering="unnumbered">&lt;%= render_template 'Package Action - SSH Default', :action =&gt; 'install', :package =&gt; 'httpd' %&gt;
&lt;%= render_template 'Service Action - SSH Default', :action =&gt; 'start', :service_name =&gt; 'httpd' %&gt;</programlisting>
				<simpara>
					The above template specifies parameter values for the rendered template directly. It is also possible to use the <emphasis role="strong">input()</emphasis> method to allow users to define input for the rendered template on job execution. For example, you can use the following syntax:
				</simpara>
				
<programlisting language="Ruby" linenumbering="unnumbered">&lt;%= render_template 'Package Action - SSH Default', :action =&gt; 'install', :package =&gt; input("package") %&gt;</programlisting>
				<simpara>
					With the above template, you have to import the parameter definition from the rendered template. To do so, navigate to the <emphasis role="strong">Jobs</emphasis> tab, click <emphasis role="strong">Add Foreign Input Set</emphasis>, and select the rendered template from the <emphasis role="strong">Target template</emphasis> list. You can import all parameters or specify a comma separated list.
				</simpara>
				<example xml:id="exam-Managing_Hosts-Rendering_a_restorecon_Template">
					<title>Rendering a restorecon Template</title>
					<simpara>
						This example shows how to create a template derived from the <emphasis role="strong">Run command - restorecon</emphasis> template created in <xref linkend="exam-Managing_Hosts-Creating_a_restorecon_Template" />. This template does not require user input on job execution, it will restore the SELinux context in all files under the <emphasis role="strong">/home/</emphasis> directory on target hosts.
					</simpara>
					<simpara>
						Create a new template as described in <xref linkend="sect-Managing_Hosts-Setting_up_Job_Templates" />, and specify the following string in the template editor:
					</simpara>
					
<programlisting language="Ruby" linenumbering="unnumbered">&lt;%= render_template("Run Command - restorecon", :directory =&gt; "/home") %&gt;</programlisting>
				</example>
				<example xml:id="exam-Managing_Hosts-Including_Power_Actions_in_Templates">
					<title>Including Power Actions in Templates</title>
					<simpara>
						This example shows how to set up a job template for performing power actions, such as reboot. This procedure prevents Satellite from interpreting the disconnect exception upon reboot as an error, and consequently, remote execution of the job works correctly.
					</simpara>
					<simpara>
						Create a new template as described in <xref linkend="sect-Managing_Hosts-Setting_up_Job_Templates" />, and specify the following string in the template editor:
					</simpara>
					
<programlisting language="Ruby" linenumbering="unnumbered">&lt;%= render_template("Power Action - SSH Default", :action =&gt; "restart") %&gt;</programlisting>
				</example>
			</section>
		</section>
		<section xml:id="sect-Managing_Hosts-Delegating_Permissions">
			<title>Delegating Permissions for Remote Execution</title>
			<simpara>
				You can control which users can run which jobs within your infrastructure, including which hosts they can target. The remote execution feature provides two built-in roles:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Remote Execution Manager</emphasis>: This role allows access to all remote execution features and functionality.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Remote Execution User</emphasis>: This role only allows running jobs; it does not provide permission to modify job templates.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				You can clone the Remote Execution User role and customize its filter for increased granularity. If you adjust the filter with the <literal>view_job_templates</literal> permission, the user can only see and trigger jobs based on matching job templates. You can use the <literal>view_hosts</literal> and <literal>view_smart_proxies</literal> permissions to limit which hosts or Capsules are visible to the role.
			</simpara>
			<simpara>
				The <literal>execute_template_invocation</literal> permission is a special permission that is checked immediately before execution of a job begins. This permission defines which job template you can run on a particular host. This allows for even more granularity when specifying permissions. For more information on working with roles and permissions see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/administering_red_hat_satellite/chap-red_hat_satellite-administering_red_hat_satellite-users_and_roles#sect-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Users_and_Roles-Creating_and_Managing_Roles">Creating and Managing Roles</link> in the <emphasis>Administering Red Hat Satellite</emphasis>.
			</simpara>
			<simpara>
				The following example shows filters for the <literal>execute_template_invocation</literal> permission:
			</simpara>
			
<screen>name = Reboot and host.name = staging.example.com
name = Reboot and host.name ~ *.staging.example.com
name = "Restart service" and host_group.name = webservers</screen>
			<simpara>
				The first line in the above example permits the user to apply the <emphasis role="strong">Reboot</emphasis> template to one selected host. The second line defines a pool of hosts with names ending with <emphasis role="strong">.staging.example.com</emphasis>. The third line binds the template with a host group.
			</simpara>
			<note>
				<simpara>
					Permissions assigned to users can change over time. If a user has already scheduled some jobs to run in the future, and the permissions have changed, this can result in execution failure because the permissions are checked immediately before job execution.
				</simpara>
			</note>
		</section>
	</chapter>
	<chapter xml:id="chap-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower">
		<title>Integrating Red Hat Satellite and Ansible Tower</title>
		<simpara>
			You can integrate Red Hat Satellite 6.7 and Ansible Tower to use Satellite Server as a dynamic inventory source for Ansible Tower.
		</simpara>
		<simpara>
			You can also use the provisioning callback function to run playbooks on hosts managed by Satellite, from either the host or Ansible Tower. When provisioning new hosts from Satellite Server, you can use the provisioning callback function to trigger playbook runs from Ansible Tower. The playbook configures the host following Kickstart deployment.
		</simpara>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-Adding_Satellite_Server_to_Ansible_Tower_as_a_Dynamic_Inventory_Item">
			<title>Adding Satellite Server to Ansible Tower as a Dynamic Inventory Item</title>
			<simpara>
				To add Satellite Server to Ansible Tower as a dynamic inventory item, you must create a credential for a Satellite Server user on Ansible Tower, add an Ansible Tower user to the credential, and then configure an inventory source.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						If your Satellite deployment is large, for example, managing tens of thousands of hosts, using a non-admin user can negatively impact performance because of time penalties that accrue during authorization checks. For large deployments, consider using an admin user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						For non-admin users, you must assign the <literal>Ansible Tower Inventory Reader</literal> role to your Satellite Server user. For more information about managing users, roles, and permission filters, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/administering_red_hat_satellite/chap-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Users_and_Roles#sect-Red_Hat_Satellite-Administering_Red_Hat_Satellite-Users_and_Roles-Creating_and_Managing_Roles">Creating and Managing Roles</link> in <emphasis>Administering Red Hat Satellite</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You must host your Satellite Server and Ansible Tower on the same network or subnet.
					</simpara>
				</listitem>
			</itemizedlist>
			<formalpara xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-To_Add_Satellite_Server_to_Ansible_Tower_as_a_Dynamic_Inventory_Item">
				<title>Procedure</title>
				<para>
					To add Satellite Server to Ansible Tower as a Dynamic Inventory Item, complete the following procedure:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						In the Ansible Tower web UI, create a credential for your Satellite. For more information about creating credentials, see <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html#add-a-new-credential">Add a New Credential</link> and <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html#red-hat-satellite-6">Red Hat Satellite 6 Credentials</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
					<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-Satellite_Credentials">
						<title>Satellite Credentials</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="67*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top"><emphasis role="strong">Credential Type</emphasis>:</entry>
									<entry align="left" valign="top"><emphasis role="strong">Red Hat Satellite 6</emphasis></entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Satellite 6 URL</emphasis>:
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										https://<emphasis>satellite.example.com</emphasis>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Username</emphasis>:
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The username of the Satellite user with the integration role.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Password</emphasis>:
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The password of the Satellite user.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Add an Ansible Tower user to the new credential. For more information about adding a user to a credential, see <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html#getting-started-with-credentials">Getting Started with Credentials</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add a new inventory. For more information, see <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/inventories.html#add-a-new-inventory">Add a new inventory</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the new inventory, add Satellite Server as the inventory source, specifying the following inventory source options. For more information, see <link xlink:href="https://docs.ansible.com/ansible-tower/latest/html/userguide/inventories.html#add-source">Add Source</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
					<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-Inventory_Source_Options">
						<title>Inventory Source Options</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="67*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top"><emphasis role="strong">Source</emphasis></entry>
									<entry align="left" valign="top"><emphasis role="strong">Red Hat Satellite 6</emphasis></entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Credential</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The credential you create for Satellite Server.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Overwrite</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Select
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Overwrite Variables</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Select
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Update on Launch</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Select
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Cache Timeout</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis>90</emphasis>
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Ensure that you synchronize the source that you add.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-Configuring_Provisioning_Callback_for_a_Host">
			<title>Configuring Provisioning Callback for a Host</title>
			<simpara>
				When you create hosts in Satellite, you can use Ansible Tower to run playbooks to configure your newly created hosts. This is called <emphasis>provisioning callback</emphasis> in Ansible Tower.
			</simpara>
			<simpara>
				The provisioning callback function triggers a playbook run from Ansible Tower as part of the provisioning process. The playbook configures the host after Kickstart deployment.
			</simpara>
			<simpara>
				For more information about provisioning callbacks, see <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html#provisioning-callbacks">Provisioning Callbacks</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
			</simpara>
			<simpara>
				In Satellite Server, the <literal>Kickstart Default</literal> and <literal>Kickstart Default Finish</literal> templates include three snippets:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						<literal>ansible_provisioning_callback</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>ansible_tower_callback_script</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>ansible_tower_callback_service</literal>
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				You can add parameters to hosts or host groups to provide the credentials that these snippets can use to run Ansible playbooks on your newly created hosts.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					Before you can configure provisioning callbacks, you must add Satellite as a dynamic inventory in Ansible Tower. For more information, see <link linkend="chap-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower">Integrating Satellite and Ansible Tower</link>.
				</para>
			</formalpara>
			<simpara>
				In the Ansible Tower web UI, you must complete the following tasks:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Create a machine credential for your new host. Ensure that you enter the same password in the credential that you plan to assign to the host that you create in Satellite. For more information, see <link xlink:href="https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html#add-a-new-credential">Add a New Credential</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create a project. For more information, see <link xlink:href="https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html">Projects</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add a job template to your project. For more information, see <link xlink:href="https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html#create-a-job-template">Job Templates</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In your job template, you must enable provisioning callbacks, generate the host configuration key, and note the <emphasis>template_ID</emphasis> of your job template. For more information about job templates, see <link xlink:href="http://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html#">Job Templates</link> in the <emphasis>Ansible Tower User Guide</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-To_Configure_Provisioning_Callback_for_a_Host">
				<title>Procedure</title>
				<para>
					To configure provisioning callback for a new host in Satellite, complete the following steps:
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						In the Red Hat Satellite web UI, navigate to <emphasis role="strong">Configure</emphasis> &gt; <emphasis role="strong">Host Group</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create a host group or edit an existing host group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the Host Group window, click the <emphasis role="strong">Parameters</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add Parameter</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter the following information for each new parameter:
					</simpara>
					<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Integrating_Satellite_and_Ansible_Tower-Host_Parameters">
						<title>Host Parameters</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="25*"></colspec>
							<colspec colname="col_2" colwidth="25*"></colspec>
							<colspec colname="col_3" colwidth="50*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Name</entry>
									<entry align="left" valign="top">Value</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>ansible_tower_provisioning</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										true
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enables Provisioning Callback.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>ansible_tower_fqdn</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis>tower.example.com</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The fully qualified domain name (FQDN) of your Ansible Tower. Do not add <literal>https</literal> because this is appended by Ansible Tower.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>ansible_job_template_id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis>template_ID</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of your provisioning template that you can find in the URL of the template: <literal>/templates/job_template/<emphasis>5</emphasis></literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>ansible_host_config_key</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis>config_KEY</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The host configuration key that your job template generates in Ansible Tower.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create a host using the host group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the new host, enter the following command to start the <literal>ansible-callback</literal> service:
					</simpara>
					
<screen># systemctl start ansible-callback</screen>
				</listitem>
				<listitem>
					<simpara>
						On the new host, enter the following command to output the status of the <literal>ansible-callback</literal> service:
					</simpara>
					
<screen># systemctl status ansible-callback</screen>
					<simpara>
						Provisioning callback is configured correctly if the command returns the following output:
					</simpara>
					
<screen>SAT_host systemd[1]: Started Provisioning callback to Ansible Tower...</screen>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>Manual Provisioning Callback</title>
				<para>
					You can use the provisioning callback URL and the host configuration key from a host to call Ansible Tower. For example:
				</para>
			</formalpara>
			
<screen># curl -k -s --data curl --insecure --data host_config_key=<emphasis>my_config_key</emphasis> \
 https://<emphasis>tower.example.com</emphasis>/api/v2/job_templates/<emphasis>8</emphasis>/callback/</screen>
			<simpara>
				Ensure that you use <literal>https</literal> when you enter the provisioning callback URL.
			</simpara>
			<simpara>
				This triggers the playbook run specified in the template against the host.
			</simpara>
		</section>
	</chapter>
	<chapter xml:id="Synchronizing_Templates_Repositories">
		<title>Synchronizing Template Repositories</title>
		<simpara>
			In Satellite, you can synchronize repositories of job templates, provisioning templates, report templates, and partition table templates between Satellite Server and a version control system or local directory. In this chapter, a Git repository is used for demonstration purposes.
		</simpara>
		<simpara>
			This section details the workflow for:
		</simpara>
		<itemizedlist>
			<listitem>
				<simpara>
					installing and configuring the TemplateSync plug-in
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					performing exporting and importing tasks
				</simpara>
			</listitem>
		</itemizedlist>
		<section remap="_enabling_the_templatesync_plug_in" xml:id="enabling_the_templatesync_plug_in">
			<title>Enabling the TemplateSync plug-in</title>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						To enable the plug-in on your Satellite Server, enter the following command:
					</simpara>
					
<screen># satellite-installer --enable-foreman-plugin-templates</screen>
				</listitem>
				<listitem>
					<simpara>
						To verify that the plug-in is installed correctly, ensure <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> includes the <emphasis role="strong">TemplateSync</emphasis> menu.
					</simpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="configuring-the-templatesync-plug-in">
			<title>Configuring the TemplateSync plug-in</title>
			<simpara>
				In the Satellite web UI, navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> &gt; <emphasis role="strong">TemplateSync</emphasis> to configure the plug-in. The following table explains the attributes behavior. Note that some attributes are used only for importing or exporting tasks.
			</simpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>Synchronizing Templates Plug-in configuration</title>
				<tgroup cols="4">
					<colspec colname="col_1" colwidth="25*"></colspec>
					<colspec colname="col_2" colwidth="25*"></colspec>
					<colspec colname="col_3" colwidth="25*"></colspec>
					<colspec colname="col_4" colwidth="25*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Parameter</entry>
							<entry align="left" valign="top">API parameter name</entry>
							<entry align="left" valign="top">Meaning on importing</entry>
							<entry align="left" valign="top">Meaning on exporting</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Associate
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>associate</literal>
							</simpara>
							<simpara>
								Accepted values: <literal>always</literal>, <literal>new</literal>, <literal>never</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Associates templates with OS, Organization, and Location based on metadata.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Branch
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>branch</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Specifies the default branch in Git repository to read from.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Specifies the default branch in Git repository to write to.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Dirname
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>dirname</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Specifies the subdirectory under the repository to read from.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Specifies the subdirectory under the repository to write to.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Filter
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>filter</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Imports only templates with names that match this regular expression.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Exports only templates with names that match this regular expression.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Force import
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>force</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Imported templates overwrite locked templates with the same name.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Lock templates
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>lock</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Do not overwrite existing templates when you import a new template with the same name, unless <emphasis role="strong">Force import</emphasis> is enabled.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Metadata export mode
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>metadata_export_mode</literal>
							</simpara>
							<simpara>
								Accepted values: <literal>refresh</literal>, <literal>keep</literal>, <literal>remove</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Defines how metadata is handled when exporting:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Refresh</emphasis> — remove existing metadata from the template content and generate new metadata based on current assignments and attributes.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Keep</emphasis> — retain the existing metadata.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Remove</emphasis> — export template without metadata. Useful if you want to add metadata manually.
									</simpara>
								</listitem>
							</itemizedlist>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Negate
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>negate</literal>
							</simpara>
							<simpara>
								Accepted values: <literal>true</literal>, <literal>false</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Imports templates ignoring the filter attribute.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Exports templates ignoring the filter attribute.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Prefix
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>prefix</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Adds specified string to the beginning of the template if the template name does not start with the prefix already.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Repo
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>repo</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Defines the path to the repository to synchronize from.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Defines the path to a repository to export to.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Verbosity
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								<literal>verbose</literal>
							</simpara>
							<simpara>
								Accepted values: <literal>true</literal>, <literal>false</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enables writing verbose messages to the logs for this action.
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								N/A
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section remap="_importing_and_exporting_templates" xml:id="importing_and_exporting_templates">
			<title>Importing and Exporting Templates</title>
			<simpara>
				You can import and export templates using the Satellite web UI, Hammer CLI, or Satellite API. Satellite API calls use the role-based access control system, which enables the tasks to be executed as any user. You can synchronize templates with a version control system, such as Git, or a local directory.
			</simpara>
			<section remap="_importing_templates" xml:id="importing_templates">
				<title>Importing Templates</title>
				<simpara>
					You can import templates from a repository of your choice. You can use different protocols to point to your repository, for example <literal>/tmp/dir</literal>, <literal>git://example.com</literal>, <literal><link xlink:href="https://example.com">https://example.com</link></literal>, and <literal>ssh://example.com</literal>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Each template must contain the location and organization that the template belongs to. This applies to all template types. Before you import a template, ensure that you add the following section to the template:
						</simpara>
						
<screen>&lt;%#
kind: provision
name: <emphasis>My Kickstart File</emphasis>
oses:
- RedHat 7
- RedHat 6
locations:
- <emphasis>First Location</emphasis>
- <emphasis>Second Location</emphasis>
organizations:
- <emphasis>Default Organization</emphasis>
- <emphasis>Extra Organization</emphasis>
%&gt;</screen>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Sync Templates</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Import</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Each field is populated with values configured in <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> &gt; <emphasis role="strong">TemplateSync</emphasis>. Change the values as required for the templates you want to import. For more information about each field, see <xref linkend="configuring-the-templatesync-plug-in" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The Satellite web UI displays the status of the import. The status is not persistent; if you leave the status page, you cannot return to it.
				</simpara>
				<itemizedlist>
					<title>For CLI Users</title>
					<listitem>
						<simpara>
							To import a template from a repository, enter the following command:
						</simpara>
						
<screen>$ hammer import-templates \
    --prefix '[<emphasis>Custom Index</emphasis>] ' \
    --filter '.*<emphasis>Template Name$</emphasis>' \
    --repo <emphasis>https://github.com/examplerepo/exampledirectory</emphasis> \
    --branch <emphasis>my_branch</emphasis> \
    --organization 'Default Organization'</screen>
						<simpara>
							For better indexing and management of your templates, use <literal>--prefix</literal> to set a category for your templates. To select certain templates from a large repository, use <literal>--filter</literal> to define the title of the templates that you want to import. For example <literal>--filter '.*Ansible Default$'</literal> imports various Ansible Default templates.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_exporting_templates" xml:id="exporting_templates">
				<title>Exporting Templates</title>
				<simpara>
					You can export templates to a version control server, such as a Git repository.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Sync Templates</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Each field is populated with values configured in <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis> &gt; <emphasis role="strong">TemplateSync</emphasis>. Change the values as required for the templates you want to export. For more information about each field, see <xref linkend="configuring-the-templatesync-plug-in" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The Satellite web UI displays the status of the export. The status is not persistent; if you leave the status page, you cannot return to it.
				</simpara>
				<orderedlist numeration="arabic">
					<title>For CLI Users</title>
					<listitem>
						<simpara>
							Clone a local copy of your Git repository:
						</simpara>
						
<screen>$ git clone https://github.com/theforeman/community-templates <emphasis>/custom/templates</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							Change the owner of your local directory to the <literal>foreman</literal> user, and change the SELinux context with the following commands:
						</simpara>
						
<screen># chown -R foreman:foreman <emphasis>/custom/templates</emphasis>
# chcon -R -t httpd_sys_rw_content_t <emphasis>/custom/templates</emphasis></screen>
					</listitem>
					<listitem>
						<simpara>
							To export the templates to your local repository, enter the following command:
						</simpara>
						
<screen>hammer export-templates --organization 'Default Organization' --repo <emphasis>/custom/templates</emphasis></screen>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_synchronizing_templates_using_the_satellite_api" xml:id="synchronizing_templates_using_the_satellite_api">
				<title>Synchronizing Templates Using the Satellite API</title>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Each template must contain the location and organization that the template belongs to. This applies to all template types. Before you import a template, ensure that you add the following section to the template:
						</simpara>
						
<screen>&lt;%#
kind: provision
name: <emphasis>My Kickstart File</emphasis>
oses:
- RedHat 7
- RedHat 6
locations:
- <emphasis>First Location</emphasis>
- <emphasis>Second Location</emphasis>
organizations:
- <emphasis>Default Organization</emphasis>
- <emphasis>Extra Organization</emphasis>
%&gt;</screen>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Configure a version control system that uses SSH authorization, for example gitosis, gitolite, or git daemon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Configure the TemplateSync plug-in settings on a <emphasis role="strong">TemplateSync</emphasis> tab.
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Change the <emphasis role="strong">Branch</emphasis> setting to match the target branch on a Git server.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Change the <emphasis role="strong">Repo</emphasis> setting to match the Git repository. For example, for the repository located in <literal>git@git.example.com/templates.git</literal> set the setting into <literal>ssh://git@git.example.com/templates.git</literal>.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Accept Git SSH host key as the <literal>foreman</literal> user:
						</simpara>
						
<screen># sudo -u foreman ssh <emphasis>git.example.com</emphasis></screen>
						<simpara>
							You can see the <literal>Permission denied, please try again.</literal> message in the output, which is expected, because the SSH connection cannot succeed yet.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create an SSH key pair if you do not already have it. Do not specify a passphrase.
						</simpara>
						
<screen># sudo -u foreman ssh-keygen</screen>
					</listitem>
					<listitem>
						<simpara>
							Configure your version control server with the public key from your Satellite, which resides in <literal>/usr/share/foreman/.ssh/id_rsa.pub</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Export templates from your Satellite Server to the version control repository specified in the <emphasis role="strong">TemplateSync</emphasis> menu:
						</simpara>
						
<screen>$ curl -H "Accept:application/json,version=2" \
-H "Content-Type:application/json" \
-u <emphasis>login</emphasis>:<emphasis>password</emphasis> \
-k https://<emphasis>satellite.example</emphasis>.com/api/v2/templates/export \
-X POST

{"message":"Success"}</screen>
					</listitem>
					<listitem>
						<simpara>
							Import templates to Satellite Server after their content was changed:
						</simpara>
						
<screen>$ curl -H "Accept:application/json,version=2" \
-H "Content-Type:application/json" \
-u <emphasis>login</emphasis>:<emphasis>password</emphasis> \
-k https://<emphasis>satellite.example</emphasis>.com/api/v2/templates/import \
-X POST

{“message”:”Success”}</screen>
						<simpara>
							Note that templates provided by Satellite are locked and you cannot import them by default. To overwrite this behavior, change the <literal>Force import</literal> setting in the <emphasis role="strong">TemplateSync</emphasis> menu to <literal>yes</literal> or add the <literal>force</literal> parameter <literal>-d '{ "force": "true" }’</literal> to the import command.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_synchronizing_templates_with_a_local_directory_using_the_satellite_api" xml:id="synchronizing_templates_with_a_local_directory_using_the_satellite_api">
				<title>Synchronizing Templates with a Local Directory Using the Satellite API</title>
				<simpara>
					Synchronizing templates with a local directory is useful if you have configured a version control repository in the local directory. That way, you can edit templates and track the history of edits in the directory. You can also synchronize changes to Satellite Server after editing the templates.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Each template must contain the location and organization that the template belongs to. This applies to all template types. Before you import a template, ensure that you add the following section to the template:
						</simpara>
						
<screen>&lt;%#
kind: provision
name: <emphasis>My Kickstart File</emphasis>
oses:
- RedHat 7
- RedHat 6
locations:
- <emphasis>First Location</emphasis>
- <emphasis>Second Location</emphasis>
organizations:
- <emphasis>Default Organization</emphasis>
- <emphasis>Extra Organization</emphasis>
%&gt;</screen>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the directory where templates are stored and apply appropriate permissions and SELinux context:
						</simpara>
						
<screen># mkdir -p <emphasis>/usr/share/templates_dir/</emphasis>
# chown foreman <emphasis>/usr/share/templates_dir/</emphasis>
# chcon -t httpd_sys_rw_content_t <emphasis>/usr/share/templates_dir/</emphasis> -R</screen>
					</listitem>
					<listitem>
						<simpara>
							Change the <emphasis role="strong">Repo</emphasis> setting on the <emphasis role="strong">TemplateSync</emphasis> tab to match the export directory <literal>/usr/share/templates_dir/</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Export templates from your Satellite Server to a local directory:
						</simpara>
						
<screen>$ curl -H "Accept:application/json,version=2" \
-H "Content-Type:application/json" \
-u <emphasis>login</emphasis>:<emphasis>password</emphasis> \
-k https://<emphasis>satellite.example</emphasis>.com/api/v2/templates/export \
-X POST \

{"message":"Success"}</screen>
					</listitem>
					<listitem>
						<simpara>
							Import templates to Satellite Server after their content was changed:
						</simpara>
						
<screen>$ curl -H "Accept:application/json,version=2" \
-H "Content-Type:application/json" \
-u <emphasis>login</emphasis>:<emphasis>password</emphasis> \
-k https://<emphasis>satellite.example</emphasis>.com/api/v2/templates/import \
-X POST

{“message”:”Success”}</screen>
						<simpara>
							Note that templates provided by Satellite are locked and you cannot import them by default. To overwrite this behavior, change the <literal>Force import</literal> setting in the <emphasis role="strong">TemplateSync</emphasis> menu to <literal>yes</literal> or add the <literal>force</literal> parameter <literal>-d '{ "force": "true" }’</literal> to the import command.
						</simpara>
					</listitem>
				</orderedlist>
				<note>
					<simpara>
						You can override default API settings by specifying them in the request with the <literal>-d</literal> parameter. The following example exports templates to the <literal>git.example.com/templates</literal> repository:
					</simpara>
					
<screen>$ curl -H "Accept:application/json,version=2" \
-H "Content-Type:application/json" \
-u login:password \
-k https://satellite.example.com/api/v2/templates/export \
-X POST \
-d "{\"repo\":\"git.example.com/templates\"}"</screen>
				</note>
			</section>
		</section>
		<section remap="_advanced_git_configuration" xml:id="advanced_git_configuration">
			<title>Advanced Git Configuration</title>
			<simpara>
				You can perform additional Git configuration for the TemplateSync plug-in using the command line or editing the <literal>.gitconfig</literal> file.
			</simpara>
			<formalpara>
				<title>Accepting a self-signed Git certificate</title>
				<para>
					If you are using a self-signed certificate authentification on your Git server, validate the certificate with the <literal>git config http.sslCAPath</literal> command.
				</para>
			</formalpara>
			<simpara>
				For example, the following command verifies a self-signed certificate stored in <literal>/cert/cert.pem</literal>:
			</simpara>
			
<screen># sudo -u foreman git config --global http.sslCAPath <emphasis>cert/cert.pem</emphasis></screen>
			<simpara>
				For a complete list of advanced options, see the <literal>git-config</literal> manual page.
			</simpara>
		</section>
		<section remap="_uninstalling_the_plug_in" xml:id="uninstalling_the_plug_in">
			<title>Uninstalling the plug-in</title>
			<simpara>
				To avoid errors after removing the foreman_templates plugin:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						Disable the plug-in using the Satellite installer:
					</simpara>
					
<screen># satellite-installer --no-enable-foreman-plugin-templates</screen>
				</listitem>
				<listitem>
					<simpara>
						Clean custom data of the plug-in. The command does not affect any templates that you created.
					</simpara>
					
<screen># foreman-rake templates:cleanup</screen>
				</listitem>
				<listitem>
					<simpara>
						Uninstall the plug-in:
					</simpara>
					
<screen># yum remove tfm-rubygem-foreman_templates</screen>
				</listitem>
			</orderedlist>
		</section>
	</chapter>
	<appendix xml:id="appe-Red_Hat_Satellite-Managing_Hosts-Template_Writing_Reference">
		<title>Template Writing Reference</title>
		<simpara>
			Embedded Ruby (ERB) is a tool for generating text files based on templates that combine plain text with Ruby code. Red Hat Satellite uses ERB syntax in the following cases:
		</simpara>
		<variablelist>
			<varlistentry>
				<term>Provisioning templates</term>
				<listitem>
					<simpara>
						For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/provisioning_guide/configuring_provisioning_resources#Configuring_Provisioning_Resources-Creating_Provisioning_Templates">Creating Provisioning Templates</link> in the <emphasis>Provisioning Guide</emphasis>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Remote execution job templates</term>
				<listitem>
					<simpara>
						For more information, see <xref linkend="Running_Jobs_on_Hosts" />.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Report templates</term>
				<listitem>
					<simpara>
						For more information, see <xref linkend="using_report_templates" />.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Templates for partition tables</term>
				<listitem>
					<simpara>
						For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/provisioning_guide/configuring_provisioning_resources#Configuring_Provisioning_Resources-Creating_Partition_Tables">Creating Partition Tables</link> in the <emphasis>Provisioning Guide</emphasis>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Smart Variables</term>
				<listitem>
					<simpara>
						For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/puppet_guide/chap-red_hat_satellite-puppet_guide-adding_puppet_modules_to_red_hat_satellite_6#sect-Red_Hat_Satellite-Puppet_Guide-Adding_Puppet_Modules_to_Red_Hat_Satellite_6-Configuring_Smart_Variables">Configuring Smart Variables</link> in the <emphasis>Puppet Guide</emphasis>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Smart Class Parameters</term>
				<listitem>
					<simpara>
						For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.7/html/puppet_guide/chap-red_hat_satellite-puppet_guide-adding_puppet_modules_to_red_hat_satellite_6#sect-Red_Hat_Satellite-Puppet_Guide-Adding_Puppet_Modules_to_Red_Hat_Satellite_6-Configuring_Smart_Class_Parameters">Configuring Smart Class Parameters</link> in the <emphasis>Puppet Guide</emphasis>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<simpara>
			This section provides an overview of Satellite-specific macros and variables that can be used in ERB templates along with some usage examples. Note that the default templates provided by Red Hat Satellite (<emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Provisioning templates</emphasis>, <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job templates</emphasis>, <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis> ) also provide a good source of ERB syntax examples.
		</simpara>
		<simpara>
			When provisioning a host or running a remote job, the code in the ERB is executed and the variables are replaced with the host specific values. This process is referred to as <emphasis role="strong">rendering</emphasis>. The Satellite Server has the safemode rendering option enabled by default, which prevents any harmful code being executed from templates.
		</simpara>
		<section xml:id="sect-Managing_Hosts-Writing_ERB_Templates">
			<title>Writing ERB Templates</title>
			<simpara>
				The following tags are the most important and commonly used in ERB templates:
			</simpara>
			<formalpara>
				<title>&lt;% %&gt;</title>
				<para>
					All Ruby code is enclosed within <literal>&lt;% %&gt;</literal> in an ERB template. The code is executed when the template is rendered. It can contain Ruby control flow structures as well as Satellite-specific macros and variables. For example:
				</para>
			</formalpara>
			
<screen>&lt;% if @host.operatingsystem.family == "Redhat" &amp;&amp; @host.operatingsystem.major.to_i &gt; 6 -%&gt;
systemctl &lt;%= input("action") %&gt; &lt;%= input("service") %&gt;
&lt;% else -%&gt;
service &lt;%= input("service") %&gt; &lt;%= input("action") %&gt;
&lt;% end -%&gt;</screen>
			<simpara>
				Note that this template silently performs an action with a service and returns nothing at the output.
			</simpara>
			<formalpara>
				<title>&lt;%= %&gt;</title>
				<para>
					This provides the same functionality as <literal>&lt;% %&gt;</literal> but when the template is executed, the code output is inserted into the template. This is useful for variable substitution, for example:
				</para>
			</formalpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>echo &lt;%= @host.name %&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen><emphasis>host.example.com</emphasis></screen>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;% server_name = @host.fqdn %&gt;
&lt;%= server_name %&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen><emphasis>host.example.com</emphasis></screen>
			<simpara>
				Note that if you enter an incorrect variable, no output is returned. However, if you try to call a method on an incorrect variable, the following error message returns:
			</simpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;%= @<emphasis>example_incorrect_variable</emphasis>.fqdn -%&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen>undefined method `fqdn' for nil:NilClass</screen>
			<formalpara>
				<title>&lt;% -%&gt;, &lt;%= -%&gt;</title>
				<para>
					By default, a newline character is inserted after a Ruby block if it is closed at the end of a line:
				</para>
			</formalpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;%= "line1" %&gt;
&lt;%= "line2" %&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen>line1
line2</screen>
			<simpara>
				To change the default behavior, modify the enclosing mark with <literal>-%&gt;</literal>:
			</simpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;%= "line1" -%&gt;
&lt;%= "line2" %&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen>line1line2</screen>
			<simpara>
				This is used to reduce the number of lines, where Ruby syntax permits, in rendered templates. White spaces in ERB tags are ignored.
			</simpara>
			<simpara>
				An example of how this would be used in a report template to remove unnecessary newlines between a FQDN and IP address:
			</simpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;%= @host.fqdn -%&gt;
&lt;%= @host.ip -%&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen><emphasis>host.example.com10.10.181.216</emphasis></screen>
			<formalpara>
				<title>&lt;%# %&gt;</title>
				<para>
					Encloses a comment that is ignored during template rendering:
				</para>
			</formalpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;%# A comment %&gt;</screen>
			<simpara>
				This generates no output.
			</simpara>
			<formalpara>
				<title>Indentation in ERB templates</title>
				<para>
					Because of the varying lengths of the ERB tags, indenting the ERB syntax might seem messy. ERB syntax ignore white space. One method of handling the indentation is to declare the ERB tag at the beginning of each new line and then use white space within the ERB tag to outline the relationships within the syntax, for example:
				</para>
			</formalpara>
			
<screen>&lt;%- load_hosts.each do |host| -%&gt;
&lt;%-   if host.build? %&gt;
&lt;%=     host.name %&gt; build is in progress
&lt;%-   end %&gt;
&lt;%- end %&gt;</screen>
		</section>
		<section xml:id="sect-Managing_Hosts-Troubleshooting_ERB_Templates">
			<title>Troubleshooting ERB Templates</title>
			<simpara>
				The Satellite web UI provides two ways to verify the template rendering for a specific host:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Directly in the template editor</emphasis> – when editing a template (under <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Partition tables</emphasis>, <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Provisioning templates</emphasis>, or <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job templates</emphasis>), on the <emphasis role="strong">Template</emphasis> tab click <emphasis role="strong">Preview</emphasis> and select a host from the list. The template then renders in the text field using the selected host’s parameters. Preview failures can help to identify issues in your template.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">At the host’s details page</emphasis> – select a host at <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">All hosts</emphasis> and click the <emphasis role="strong">Templates</emphasis> tab to list templates associated with the host. Select <emphasis role="strong">Review</emphasis> from the list next to the selected template to view it’s rendered version.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="sect-Managing_Hosts-Satellite_Specific_macros_and_Variables">
			<title>Generic Satellite-Specific Macros</title>
			<simpara>
				This section lists Satellite-specific macros for ERB templates.
			</simpara>
			<simpara>
				You can use the macros listed in the following table across all kinds of templates.
			</simpara>
			<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Generic_Macros">
				<title>Generic Macros</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="50*"></colspec>
					<colspec colname="col_2" colwidth="50*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Name</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								indent(n)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Indents the block of code by n spaces, useful when using a snippet template that is not indented.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								foreman_url(kind)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the full URL to host-rendered templates of the given kind. For example, templates of the "provision" type usually reside at <emphasis role="strong"><link xlink:href="http://HOST/unattended/provision">http://HOST/unattended/provision</link></emphasis>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								snippet(name)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Renders the specified snippet template. Useful for nesting provisioning templates.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								snippets(file)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Renders the specified snippet found in the Foreman database, attempts to load it from the <emphasis role="strong">unattended/snippets/</emphasis> directory if it is not found in the database.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								snippet_if_exists(name)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Renders the specified snippet, skips if no snippet with the specified name is found.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section xml:id="ref_template_macros">
			<title>Templates Macros</title>
			<simpara>
				If you want to write custom templates, you can use some of the following macros.
			</simpara>
			<simpara>
				Depending on the template type, some of the following macros have different requirements.
			</simpara>
			<simpara>
				For more information about the available macros for report templates, in the Satellite web UI, navigate to <emphasis role="strong">Monitor</emphasis> &gt; <emphasis role="strong">Report Templates</emphasis>, and click <emphasis role="strong">Create Template</emphasis>. In the Create Template window, click the <emphasis role="strong">Help</emphasis> tab.
			</simpara>
			<simpara>
				For more information about the available macros for job templates, in the Satellite web UI, navigate to <emphasis role="strong">Hosts</emphasis> &gt; <emphasis role="strong">Job Templates</emphasis>, and click the <emphasis role="strong">New Job Template</emphasis>. In the New Job Template window, click the <emphasis role="strong">Help</emphasis> tab.
			</simpara>
			<variablelist>
				<varlistentry>
					<term>input</term>
					<listitem>
						<simpara>
							Using the <literal>input</literal> macro, you can customize the input data that the template can work with. You can define the input name, type, and the options that are available for users. For report templates, you can only use user inputs. When you define a new input and save the template, you can then reference the input in the ERB syntax of the template body.
						</simpara>
						
<screen>&lt;%= input('cpus') %&gt;</screen>
						<simpara>
							This loads the value from user input <literal>cpus</literal>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>load_hosts</term>
					<listitem>
						<simpara>
							Using the <literal>load_hosts</literal> macro, you can generate a complete list of hosts.
						</simpara>
						
<screen>&lt;%- load_hosts().each_record do |host| -%&gt;
&lt;%=     host.name %&gt;</screen>
						<simpara>
							Use the <literal>load_hosts</literal> macro with the <literal>each_record</literal> macro to load records in batches of 1000 to reduce memory consumption.
						</simpara>
						<simpara>
							If you want to filter the list of hosts for the report, you can add the option <literal>search: input(‘<emphasis>Example_Host</emphasis>’)</literal>:
						</simpara>
						
<screen>&lt;% load_hosts(search: input('<emphasis>Example_Host</emphasis>')).each_record do |host| -%&gt;
&lt;%=  host.name %&gt;
&lt;% end -%&gt;</screen>
						<simpara>
							In this example, you first create an input that you then use to refine the search criteria that the <literal>load_hosts</literal> macro retrieves.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>report_row</term>
					<listitem>
						<simpara>
							Using the <literal>report_row</literal> macro, you can create a formatted report for ease of analysis. The <literal>report_row</literal> macro requires the <literal>report_render</literal> macro to generate the output.
						</simpara>
						<formalpara>
							<title>Example input:</title>
							<para>
								
<screen>&lt;%- load_hosts(search: input('<emphasis>Example_Host</emphasis>')).each_record do |host| -%&gt;
&lt;%-   report_row(
        'Server FQDN': host.name
      ) -%&gt;
&lt;%- end -%&gt;
&lt;%= report_render -%&gt;</screen>
							</para>
						</formalpara>
						<formalpara>
							<title>Example rendering:</title>
							<para>
								
<screen>Server FQDN
<emphasis>host1.example.com</emphasis>
<emphasis>host2.example.com</emphasis>
<emphasis>host3.example.com</emphasis>
<emphasis>host4.example.com</emphasis>
<emphasis>host5.example.com</emphasis>
<emphasis>host6.example.com</emphasis></screen>
							</para>
						</formalpara>
						<simpara>
							You can add extra columns to the report by adding another header. The following example adds IP addresses to the report:
						</simpara>
						<formalpara>
							<title>Example input:</title>
							<para>
								
<screen>&lt;%- load_hosts(search: input('host')).each_record do |host| -%&gt;
&lt;%-   report_row(
      'Server FQDN': host.name,
           'IP': host.ip
      ) -%&gt;
&lt;%- end -%&gt;
&lt;%= report_render -%&gt;</screen>
							</para>
						</formalpara>
						<formalpara>
							<title>Example rendering:</title>
							<para>
								
<screen>Server FQDN,IP
<emphasis>host1.example.com</emphasis>,<emphasis>10.8.30.228</emphasis>
<emphasis>host2.example.com</emphasis>,<emphasis>10.8.30.227</emphasis>
<emphasis>host3.example.com</emphasis>,<emphasis>10.8.30.226</emphasis>
<emphasis>host4.example.com</emphasis>,<emphasis>10.8.30.225</emphasis>
<emphasis>host5.example.com</emphasis>,<emphasis>10.8.30.224</emphasis>
<emphasis>host6.example.com</emphasis>,<emphasis>10.8.30.223</emphasis></screen>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>report_render</term>
					<listitem>
						<simpara>
							This macro is available only for report templates.
						</simpara>
						<simpara>
							Using the <literal>report_render</literal> macro, you create the output for the report. During the template rendering process, you can select the format that you want for the report. YAML, JSON, HTML, and CSV formats are supported.
						</simpara>
						
<screen>&lt;%= report_render -%&gt;</screen>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>render_template()</term>
					<listitem>
						<simpara>
							This macro is available only for job templates.
						</simpara>
						<simpara>
							Using this macro, you can render a specific template. You can also enable and define arguments that you want to pass to the template.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section xml:id="ref_host_specific_variables_for_templates">
			<title>Host-Specific Variables</title>
			<simpara>
				The following variables enable using host data within templates. Note that job templates accept only <literal>@host</literal> variables.
			</simpara>
			<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Variables">
				<title>Host Specific Variables and Macros</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="50*"></colspec>
					<colspec colname="col_2" colwidth="50*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Name</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.architecture
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The architecture of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.bond_interfaces
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns an array of all bonded interfaces. See <xref linkend="ref_working_with_arrays" />.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.capabilities
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The method of system provisioning, can be either build (for example kickstart) or image.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.certname
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The SSL certificate name of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.diskLayout
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The disk layout of the host. Can be inherited from the operating system.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.domain
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The domain of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.environment
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The Puppet environment of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.facts
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns a Ruby hash of facts from Facter. For example to access the 'ipaddress' fact from the output, specify @host.facts['ipaddress'].
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.grub_pass
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the host’s GRUB password.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.hostgroup
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The host group of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								host_enc['parameters']
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns a Ruby hash containing information on host parameters. For example, use host_enc['parameters']['lifecycle_environment'] to get the life cycle environment of a host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.image_build?
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if the host is provisioned using an image.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.interfaces
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Contains an array of all available host interfaces including the primary interface. See <xref linkend="ref_working_with_arrays" />.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.interfaces_with_identifier('IDs')
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns array of interfaces with given identifier. You can pass an array of multiple identifiers as an input, for example @host.interfaces_with_identifier(['eth0', 'eth1']). See <xref linkend="ref_working_with_arrays" />.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.ip
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The IP address of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.location
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The location of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.mac
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The MAC address of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.managed_interfaces
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns an array of managed interfaces (excluding BMC and bonded interfaces). See <xref linkend="ref_working_with_arrays" />.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.medium
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The assigned operating system installation medium.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.name
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The full name of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.operatingsystem.family
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The operating system family.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.operatingsystem.major
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The major version number of the assigned operating system.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.operatingsystem.minor
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The minor version number of the assigned operating system.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.operatingsystem.name
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The assigned operating system name.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.operatingsystem.boot_files_uri(medium_provider)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Full path to the kernel and initrd, returns an array.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.os.medium_uri(@host)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The URI used for provisioning (path configured in installation media).
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								host_param('parameter_name')
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the value of the specified host parameter.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								host_param_false?('parameter_name')
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>false</literal> if the specified host parameter evaluates to false.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								host_param_true?('parameter_name')
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if the specified host parameter evaluates to true.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.primary_interface
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the primary interface of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.provider
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The compute resource provider.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.provision_interface
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the provisioning interface of the host. Returns an interface object.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.ptable
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The partition table name.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.puppet_ca_server
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The Puppet CA server the host must use.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.puppetmaster
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The Puppet master the host must use.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.pxe_build?
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if the host is provisioned using the network or PXE.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.shortname
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The short name of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.sp_ip
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The IP address of the BMC interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.sp_mac
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The MAC address of the BMC interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.sp_name
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The name of the BMC interface.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.sp_subnet
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The subnet of the BMC network.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.subnet.dhcp
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if a DHCP proxy is configured for this host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.subnet.dns_primary
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The primary DNS server of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.subnet.dns_secondary
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The secondary DNS server of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.subnet.gateway
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The gateway of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.subnet.mask
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The subnet mask of the host.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.url_for_boot(:initrd)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Full path to the initrd image associated with this host. Not recommended, as it does not interpolate variables.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@host.url_for_boot(:kernel)
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Full path to the kernel associated with this host. Not recommended, as it does not interpolate variables, prefer boot_files_uri.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@provisioning_type
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Equals to 'host' or 'hostgroup' depending on type of provisioning.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@static
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if the network configuration is static.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@template_name
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Name of the template being rendered.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								grub_pass
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the GRUB password wrapped in md5pass argument, that is <emphasis role="strong">--md5pass=#{@host.grub_pass}</emphasis>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								ks_console
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns a string assembled using the port and the baud rate of the host which can be added to a kernel line. For example <emphasis role="strong">console=ttyS1,9600</emphasis>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								root_pass
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns the root password configured for the system.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<simpara>
				The majority of common Ruby methods can be applied on host-specific variables. For example, to extract the last segment of the host’s IP address, you can use:
			</simpara>
			
<screen>&lt;% @host.ip.split('.').last %&gt;</screen>
		</section>
		<section xml:id="ref_kickstart_specific_variables">
			<title>Kickstart-Specific Variables</title>
			<simpara>
				The following variables are designed to be used within kickstart provisioning templates.
			</simpara>
			<table colsep="1" frame="all" rowsep="1" xml:id="tabl-Red_Hat_Satellite-Managing_Hosts-Kickstart_Variables">
				<title>Kickstart Specific Variables</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="50*"></colspec>
					<colspec colname="col_2" colwidth="50*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Name</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@arch
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The host architecture name, same as @host.architecture.name.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@dynamic
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Returns <literal>true</literal> if the partition table being used is a %pre script (has the #Dynamic option as the first line of the table).
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@epel
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								A command which will automatically install the correct version of the epel-release rpm. Use in a %post script.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@mediapath
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The full kickstart line to provide the URL command.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								@osver
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								The operating system major version number, same as @host.operatingsystem.major.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section xml:id="ref_writing_conditional_statements">
			<title>Conditional Statements</title>
			<simpara>
				In your templates, you might perform different actions depending on which value exists. To achieve this, you can use conditional statements in your ERB syntax.
			</simpara>
			<simpara>
				In the following example, the ERB syntax searches for a specific host name and returns an output depending on the value it finds:
			</simpara>
			<simpara>
				Example input:
			</simpara>
			
<screen>&lt;% load_hosts().each_record do |host| -%&gt;
&lt;% if @host.name == "<emphasis>host1.example.com</emphasis>" -%&gt;
&lt;%      result="positive" -%&gt;
&lt;%  else -%&gt;
&lt;%      result="negative" -%&gt;
&lt;%  end -%&gt;
&lt;%= result -%&gt;</screen>
			<simpara>
				Example rendering:
			</simpara>
			
<screen><emphasis>host1.example.com</emphasis>
positive</screen>
		</section>
		<section xml:id="ref_working_with_arrays">
			<title>Parsing Arrays</title>
			<simpara>
				While writing or modifying templates, you might encounter variables that return arrays. For example, host variables related to network interfaces, such as <literal>@host.interfaces</literal> or <literal>@host.bond_interfaces</literal>, return interface data grouped in an array. To extract a parameter value of a specific interface, use Ruby methods to parse the array.
			</simpara>
			<formalpara>
				<title>Finding the Correct Method to Parse an Array</title>
				<para>
					The following procedure is an example that you can use to find the relevant methods to parse arrays in your template. In this example, a report template is used, but the steps are applicable to other templates.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						To retrieve the NIC of a content host, in this example, using the <literal>@host.interfaces</literal> variable returns class values that you can then use to find methods to parse the array.
					</simpara>
					<formalpara>
						<title>Example input:</title>
						<para>
							
<screen>&lt;%= @host.interfaces -%&gt;</screen>
						</para>
					</formalpara>
					<formalpara>
						<title>Example rendering:</title>
						<para>
							
<screen>&lt;Nic::Base::ActiveRecord_Associations_CollectionProxy:0x00007f734036fbe0&gt;</screen>
						</para>
					</formalpara>
				</listitem>
				<listitem>
					<simpara>
						In the Create Template window, click the <emphasis role="strong">Help</emphasis> tab and search for the <literal>ActiveRecord_Associations_CollectionProxy</literal> and <literal>Nic::Base</literal> classes.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						For <literal>ActiveRecord_Associations_CollectionProxy</literal>, in the <emphasis role="strong">Allowed methods or members</emphasis> column, you can view the following methods to parse the array:
					</simpara>
					
<screen>[] each find_in_batches first map size to_a</screen>
				</listitem>
				<listitem>
					<simpara>
						For <literal>Nic::Base</literal>, in the <emphasis role="strong">Allowed methods or members</emphasis> column, you can view the following method to parse the array:
					</simpara>
					
<screen>alias? attached_devices attached_devices_identifiers attached_to bond_options children_mac_addresses domain fqdn identifier inheriting_mac ip ip6 link mac managed? mode mtu nic_delay physical? primary provision shortname subnet subnet6 tag virtual? vlanid</screen>
				</listitem>
				<listitem>
					<simpara>
						To iterate through an interface array, add the relevant methods to the ERB syntax:
					</simpara>
					<formalpara>
						<title>Example input:</title>
						<para>
							
<screen>&lt;% load_hosts().each_record do |host| -%&gt;
&lt;%    host.interfaces.each do |iface| -%&gt;
  iface.alias?: &lt;%= iface.alias? %&gt;
  iface.attached_to: &lt;%= iface.attached_to %&gt;
  iface.bond_options: &lt;%= iface.bond_options %&gt;
  iface.children_mac_addresses: &lt;%= iface.children_mac_addresses %&gt;
  iface.domain: &lt;%= iface.domain %&gt;
  iface.fqdn: &lt;%= iface.fqdn %&gt;
  iface.identifier: &lt;%= iface.identifier %&gt;
  iface.inheriting_mac: &lt;%= iface.inheriting_mac %&gt;
  iface.ip: &lt;%= iface.ip %&gt;
  iface.ip6: &lt;%= iface.ip6 %&gt;
  iface.link: &lt;%= iface.link %&gt;
  iface.mac: &lt;%= iface.mac %&gt;
  iface.managed?: &lt;%= iface.managed? %&gt;
  iface.mode: &lt;%= iface.mode %&gt;
  iface.mtu: &lt;%= iface.mtu %&gt;
  iface.physical?: &lt;%= iface.physical? %&gt;
  iface.primary: &lt;%= iface.primary %&gt;
  iface.provision: &lt;%= iface.provision %&gt;
  iface.shortname: &lt;%= iface.shortname %&gt;
  iface.subnet: &lt;%= iface.subnet %&gt;
  iface.subnet6: &lt;%= iface.subnet6 %&gt;
  iface.tag: &lt;%= iface.tag %&gt;
  iface.virtual?: &lt;%= iface.virtual? %&gt;
  iface.vlanid: &lt;%= iface.vlanid %&gt;
&lt;%- end -%&gt;</screen>
						</para>
					</formalpara>
					<formalpara>
						<title>Example rendering:</title>
						<para>
							
<screen><emphasis>host1.example.com</emphasis>
  iface.alias?: false
  iface.attached_to:
  iface.bond_options:
  iface.children_mac_addresses: []
  iface.domain:
  iface.fqdn: <emphasis>host1.example.com</emphasis>
  iface.identifier: ens192
  iface.inheriting_mac: 00:50:56:8d:4c:cf
  iface.ip: 10.10.181.13
  iface.ip6:
  iface.link: true
  iface.mac: 00:50:56:8d:4c:cf
  iface.managed?: true
  iface.mode: balance-rr
  iface.mtu:
  iface.physical?: true
  iface.primary: true
  iface.provision: true
  iface.shortname: <emphasis>host1.example.com</emphasis>
  iface.subnet:
  iface.subnet6:
  iface.tag:
  iface.virtual?: false
  iface.vlanid:</screen>
						</para>
					</formalpara>
				</listitem>
			</orderedlist>
		</section>
		<section xml:id="ref_example_template_snippets">
			<title>Example Template Snippets</title>
			<formalpara>
				<title>Checking if a Host Has Puppet and Puppetlabs Enabled</title>
				<para>
					The following example checks if the host has the Puppet and Puppetlabs repositories enabled:
				</para>
			</formalpara>
			
<screen>&lt;%
pm_set = @host.puppetmaster.empty? ? false : true
puppet_enabled = pm_set || host_param_true?('force-puppet')
puppetlabs_enabled = host_param_true?('enable-puppetlabs-repo')
%&gt;</screen>
			<formalpara>
				<title>Capturing Major and Minor Versions of a Host’s Operating System</title>
				<para>
					The following example shows how to capture the minor and major version of the host’s operating system, which can be used for package related decisions:
				</para>
			</formalpara>
			
<screen>&lt;%
os_major = @host.operatingsystem.major.to_i
os_minor = @host.operatingsystem.minor.to_i
%&gt;

&lt;% if ((os_minor &lt; 2) &amp;&amp; (os_major &lt; 14)) -%&gt;
...
&lt;% end -%&gt;</screen>
			<formalpara>
				<title>Importing Snippets to a Template</title>
				<para>
					The following example imports the <emphasis role="strong">subscription_manager_registration</emphasis> snippet to the template and indents it by four spaces:
				</para>
			</formalpara>
			
<screen>&lt;%= indent 4 do
snippet 'subscription_manager_registration'
end %&gt;</screen>
			<formalpara>
				<title>Conditionally Importing a Kickstart Snippet</title>
				<para>
					The following example imports the <literal>kickstart_networking_setup</literal> snippet if the host’s subnet has the DHCP boot mode enabled:
				</para>
			</formalpara>
			
<screen>&lt;% subnet = @host.subnet %&gt;
&lt;% if subnet.respond_to?(:dhcp_boot_mode?) -%&gt;
&lt;%= snippet 'kickstart_networking_setup' %&gt;
&lt;% end -%&gt;</screen>
			<formalpara>
				<title>Parsing Values from Host Custom Facts</title>
				<para>
					You can use the <literal>host.facts</literal> variable to parse values from a host’s facts and custom facts.
				</para>
			</formalpara>
			<simpara>
				In this example <literal>luks_stat</literal> is a custom fact that you can parse in the same manner as <literal>dmi::system::serial_number</literal>, which is a host fact:
			</simpara>
			
<screen>'Serial': host.facts['dmi::system::serial_number'],
'Encrypted': host.facts['luks_stat'],</screen>
			<simpara>
				In this example, you can customize the Applicable Errata report template to parse for custom information about the kernel version of each host:
			</simpara>
			
<screen>&lt;%-     report_row(
          'Host': host.name,
          'Operating System': host.operatingsystem,
          'Kernel': host.facts['uname::release'],
          'Environment': host.lifecycle_environment,
          'Erratum': erratum.errata_id,
          'Type': erratum.errata_type,
          'Published': erratum.issued,
          'Applicable since': erratum.created_at,
          'Severity': erratum.severity,
          'Packages': erratum.package_names,
          'CVEs': erratum.cves,
          'Reboot suggested': erratum.reboot_suggested,
        ) -%&gt;</screen>
		</section>
	</appendix>
	<appendix xml:id="appe-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd">
		<title>Host Management Without Goferd</title>
		<simpara>
			If you manage errata and package management through remote execution, you can disable the <emphasis role="strong">goferd</emphasis> service to reduce memory and CPU load on content hosts.
		</simpara>
		<simpara>
			The Satellite Tools repository provides <literal>katello-host-tools</literal>, which provides communication services for managing Errata.
		</simpara>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd-Prerequisites">
			<title>Prerequisites</title>
			<simpara>
				The following must be made on all content hosts to allow host management by remote execution.
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Ensure that the <literal>katello-host-tools</literal> package is installed:
					</simpara>
					
<screen># yum install katello-host-tools</screen>
				</listitem>
				<listitem>
					<simpara>
						Stop the goferd service:
					</simpara>
					
<screen># systemctl stop goferd.service</screen>
				</listitem>
				<listitem>
					<simpara>
						Disable the goferd service:
					</simpara>
					
<screen># systemctl disable goferd.service</screen>
				</listitem>
				<listitem>
					<simpara>
						Distribute the SSH keys to the content hosts by following <xref linkend="sect-Managing_Hosts-Establishing_a_Secure_Connection_for_Remote_Commands" />.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd-Making_Host_Management_without_Goferd_the_System_Default">
			<title>Configuring Host Management Without Goferd as the System Default</title>
			<simpara>
				These steps configure host management to use remote execution as the system default for future package deployments.
			</simpara>
			<orderedlist numeration="arabic" xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd-To_Make_Host_Management_without_Goferd_the_System_Default">
				<title>To Configure Host Management Without Goferd as the System Default:</title>
				<listitem>
					<simpara>
						Log in to the Satellite web UI.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Navigate to <emphasis role="strong">Administer</emphasis> &gt; <emphasis role="strong">Settings</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Content</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Set the <emphasis role="strong">Use remote execution by default</emphasis> parameter to <emphasis role="strong">Yes</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				The Satellite server now uses host management by remote execution instead of goferd.
			</simpara>
		</section>
		<section xml:id="sect-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd-Limitations_with_Hammer">
			<title>Limitations with Hammer</title>
			<simpara>
				The following applies if you are using the <literal>hammer</literal> command to push errata. The <literal>hammer</literal> command is dependent on goferd to manage errata on content hosts. As a workaround, use Satellite’s remote execution feature to apply errata.
			</simpara>
			<formalpara xml:id="proc-Red_Hat_Satellite-Managing_Hosts-Host_Management_without_Goferd-To_Use_Hammer_remote_execution_commands">
				<title>To Use Hammer Remote Execution Commands:</title>
				<para>
					For example, perform a <literal>yum -y update</literal> on <emphasis>host123.example.org</emphasis>:
				</para>
			</formalpara>
			
<screen># hammer job-invocation create \
--job-template "Run Command - SSH Default" \
--inputs command="yum -y update" \
--search-query "name ~ host123"
Job invocation 24 created
[.........................................] [100%]
1 task(s), 1 success, 0 fail</screen>
		</section>
	</appendix>
</book>

